return [==[ACK_CAMERA|ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW|ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL|ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST|ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE|ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE|ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC|ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE|ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2|ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE|ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN|ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL|ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER|ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG|ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED|ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN|ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM|ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1|ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE|ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE|ACT_HL2MP_GESTURE_RELOAD|ACT_HL2MP_GESTURE_RELOAD_ANGRY|ACT_HL2MP_GESTURE_RELOAD_AR2|ACT_HL2MP_GESTURE_RELOAD_CAMERA|ACT_HL2MP_GESTURE_RELOAD_CROSSBOW|ACT_HL2MP_GESTURE_RELOAD_DUEL|ACT_HL2MP_GESTURE_RELOAD_FIST|ACT_HL2MP_GESTURE_RELOAD_GRENADE|ACT_HL2MP_GESTURE_RELOAD_KNIFE|ACT_HL2MP_GESTURE_RELOAD_MAGIC|ACT_HL2MP_GESTURE_RELOAD_MELEE|ACT_HL2MP_GESTURE_RELOAD_MELEE2|ACT_HL2MP_GESTURE_RELOAD_PASSIVE|ACT_HL2MP_GESTURE_RELOAD_PHYSGUN|ACT_HL2MP_GESTURE_RELOAD_PISTOL|ACT_HL2MP_GESTURE_RELOAD_REVOLVER|ACT_HL2MP_GESTURE_RELOAD_RPG|ACT_HL2MP_GESTURE_RELOAD_SCARED|ACT_HL2MP_GESTURE_RELOAD_SHOTGUN|ACT_HL2MP_GESTURE_RELOAD_SLAM|ACT_HL2MP_GESTURE_RELOAD_SMG1|ACT_HL2MP_GESTURE_RELOAD_SUITCASE|ACT_HL2MP_GESTURE_RELOAD_ZOMBIE|ACT_HL2MP_IDLE|ACT_HL2MP_IDLE_ANGRY|ACT_HL2MP_IDLE_AR2|ACT_HL2MP_IDLE_CAMERA|ACT_HL2MP_IDLE_CROSSBOW|ACT_HL2MP_IDLE_CROUCH|ACT_HL2MP_IDLE_CROUCH_ANGRY|ACT_HL2MP_IDLE_CROUCH_AR2|ACT_HL2MP_IDLE_CROUCH_CAMERA|ACT_HL2MP_IDLE_CROUCH_CROSSBOW|ACT_HL2MP_IDLE_CROUCH_DUEL|ACT_HL2MP_IDLE_CROUCH_FIST|ACT_HL2MP_IDLE_CROUCH_GRENADE|ACT_HL2MP_IDLE_CROUCH_KNIFE|ACT_HL2MP_IDLE_CROUCH_MAGIC|ACT_HL2MP_IDLE_CROUCH_MELEE|ACT_HL2MP_IDLE_CROUCH_MELEE2|ACT_HL2MP_IDLE_CROUCH_PASSIVE|ACT_HL2MP_IDLE_CROUCH_PHYSGUN|ACT_HL2MP_IDLE_CROUCH_PISTOL|ACT_HL2MP_IDLE_CROUCH_REVOLVER|ACT_HL2MP_IDLE_CROUCH_RPG|ACT_HL2MP_IDLE_CROUCH_SCARED|ACT_HL2MP_IDLE_CROUCH_SHOTGUN|ACT_HL2MP_IDLE_CROUCH_SLAM|ACT_HL2MP_IDLE_CROUCH_SMG1|ACT_HL2MP_IDLE_CROUCH_SUITCASE|ACT_HL2MP_IDLE_CROUCH_ZOMBIE|ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01|ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02|ACT_HL2MP_IDLE_DUEL|ACT_HL2MP_IDLE_FIST|ACT_HL2MP_IDLE_GRENADE|ACT_HL2MP_IDLE_KNIFE|ACT_HL2MP_IDLE_MAGIC|ACT_HL2MP_IDLE_MELEE|ACT_HL2MP_IDLE_MELEE2|ACT_HL2MP_IDLE_MELEE_ANGRY|ACT_HL2MP_IDLE_PASSIVE|ACT_HL2MP_IDLE_PHYSGUN|ACT_HL2MP_IDLE_PISTOL|ACT_HL2MP_IDLE_REVOLVER|ACT_HL2MP_IDLE_RPG|ACT_HL2MP_IDLE_SCARED|ACT_HL2MP_IDLE_SHOTGUN|ACT_HL2MP_IDLE_SLAM|ACT_HL2MP_IDLE_SMG1|ACT_HL2MP_IDLE_SUITCASE|ACT_HL2MP_IDLE_ZOMBIE|ACT_HL2MP_JUMP|ACT_HL2MP_JUMP_ANGRY|ACT_HL2MP_JUMP_AR2|ACT_HL2MP_JUMP_CAMERA|ACT_HL2MP_JUMP_CROSSBOW|ACT_HL2MP_JUMP_DUEL|ACT_HL2MP_JUMP_FIST|ACT_HL2MP_JUMP_GRENADE|ACT_HL2MP_JUMP_KNIFE|ACT_HL2MP_JUMP_MAGIC|ACT_HL2MP_JUMP_MELEE|ACT_HL2MP_JUMP_MELEE2|ACT_HL2MP_JUMP_PASSIVE|ACT_HL2MP_JUMP_PHYSGUN|ACT_HL2MP_JUMP_PISTOL|ACT_HL2MP_JUMP_REVOLVER|ACT_HL2MP_JUMP_RPG|ACT_HL2MP_JUMP_SCARED|ACT_HL2MP_JUMP_SHOTGUN|ACT_HL2MP_JUMP_SLAM|ACT_HL2MP_JUMP_SMG1|ACT_HL2MP_JUMP_SUITCASE|ACT_HL2MP_JUMP_ZOMBIE|ACT_HL2MP_RUN|ACT_HL2MP_RUN_ANGRY|ACT_HL2MP_RUN_AR2|ACT_HL2MP_RUN_CAMERA|ACT_HL2MP_RUN_CHARGING|ACT_HL2MP_RUN_CROSSBOW|ACT_HL2MP_RUN_DUEL|ACT_HL2MP_RUN_FAST|ACT_HL2MP_RUN_FIST|ACT_HL2MP_RUN_GRENADE|ACT_HL2MP_RUN_KNIFE|ACT_HL2MP_RUN_MAGIC|ACT_HL2MP_RUN_MELEE|ACT_HL2MP_RUN_MELEE2|ACT_HL2MP_RUN_PANICKED|ACT_HL2MP_RUN_PASSIVE|ACT_HL2MP_RUN_PHYSGUN|ACT_HL2MP_RUN_PISTOL|ACT_HL2MP_RUN_PROTECTED|ACT_HL2MP_RUN_REVOLVER|ACT_HL2MP_RUN_RPG|ACT_HL2MP_RUN_SCARED|ACT_HL2MP_RUN_SHOTGUN|ACT_HL2MP_RUN_SLAM|ACT_HL2MP_RUN_SMG1|ACT_HL2MP_RUN_SUITCASE|ACT_HL2MP_RUN_ZOMBIE|ACT_HL2MP_RUN_ZOMBIE_FAST|ACT_HL2MP_SIT|ACT_HL2MP_SIT_AR2|ACT_HL2MP_SIT_CROSSBOW|ACT_HL2MP_SIT_FIST|ACT_HL2MP_SIT_GRENADE|ACT_HL2MP_SIT_MELEE|ACT_HL2MP_SIT_PHYSGUN|ACT_HL2MP_SIT_PISTOL|ACT_HL2MP_SIT_RPG|ACT_HL2MP_SIT_SHOTGUN|ACT_HL2MP_SIT_SLAM|ACT_HL2MP_SIT_SMG1|ACT_HL2MP_SWIM_ANGRY|ACT_HL2MP_SWIM_AR2|ACT_HL2MP_SWIM_CAMERA|ACT_HL2MP_SWIM_CROSSBOW|ACT_HL2MP_SWIM_DUEL|ACT_HL2MP_SWIM_FIST|ACT_HL2MP_SWIM_GRENADE|ACT_HL2MP_SWIM_IDLE_ANGRY|ACT_HL2MP_SWIM_IDLE_AR2|ACT_HL2MP_SWIM_IDLE_CAMERA|ACT_HL2MP_SWIM_IDLE_CROSSBOW|ACT_HL2MP_SWIM_IDLE_DUEL|ACT_HL2MP_SWIM_IDLE_FIST|ACT_HL2MP_SWIM_IDLE_GRENADE|ACT_HL2MP_SWIM_IDLE_KNIFE|ACT_HL2MP_SWIM_IDLE_MAGIC|ACT_HL2MP_SWIM_IDLE_MELEE|ACT_HL2MP_SWIM_IDLE_MELEE2|ACT_HL2MP_SWIM_IDLE_PASSIVE|ACT_HL2MP_SWIM_IDLE_PHYSGUN|ACT_HL2MP_SWIM_IDLE_PISTOL|ACT_HL2MP_SWIM_IDLE_REVOLVER|ACT_HL2MP_SWIM_IDLE_RPG|ACT_HL2MP_SWIM_IDLE_SCARED|ACT_HL2MP_SWIM_IDLE_SHOTGUN|ACT_HL2MP_SWIM_IDLE_SLAM|ACT_HL2MP_SWIM_IDLE_SMG1|ACT_HL2MP_SWIM_IDLE_SUITCASE|ACT_HL2MP_SWIM_IDLE_ZOMBIE|ACT_HL2MP_SWIM_KNIFE|ACT_HL2MP_SWIM_MAGIC|ACT_HL2MP_SWIM_MELEE|ACT_HL2MP_SWIM_MELEE2|ACT_HL2MP_SWIM_PASSIVE|ACT_HL2MP_SWIM_PHYSGUN|ACT_HL2MP_SWIM_PISTOL|ACT_HL2MP_SWIM_REVOLVER|ACT_HL2MP_SWIM_RPG|ACT_HL2MP_SWIM_SCARED|ACT_HL2MP_SWIM_SHOTGUN|ACT_HL2MP_SWIM_SLAM|ACT_HL2MP_SWIM_SMG1|ACT_HL2MP_SWIM_SUITCASE|ACT_HL2MP_SWIM_ZOMBIE|ACT_HL2MP_WALK|ACT_HL2MP_WALK_ANGRY|ACT_HL2MP_WALK_AR2|ACT_HL2MP_WALK_CAMERA|ACT_HL2MP_WALK_CROSSBOW|ACT_HL2MP_WALK_CROUCH|ACT_HL2MP_WALK_CROUCH_ANGRY|ACT_HL2MP_WALK_CROUCH_AR2|ACT_HL2MP_WALK_CROUCH_CAMERA|ACT_HL2MP_WALK_CROUCH_CROSSBOW|ACT_HL2MP_WALK_CROUCH_DUEL|ACT_HL2MP_WALK_CROUCH_FIST|ACT_HL2MP_WALK_CROUCH_GRENADE|ACT_HL2MP_WALK_CROUCH_KNIFE|ACT_HL2MP_WALK_CROUCH_MAGIC|ACT_HL2MP_WALK_CROUCH_MELEE|ACT_HL2MP_WALK_CROUCH_MELEE2|ACT_HL2MP_WALK_CROUCH_PASSIVE|ACT_HL2MP_WALK_CROUCH_PHYSGUN|ACT_HL2MP_WALK_CROUCH_PISTOL|ACT_HL2MP_WALK_CROUCH_REVOLVER|ACT_HL2MP_WALK_CROUCH_RPG|ACT_HL2MP_WALK_CROUCH_SCARED|ACT_HL2MP_WALK_CROUCH_SHOTGUN|ACT_HL2MP_WALK_CROUCH_SLAM|ACT_HL2MP_WALK_CROUCH_SMG1|ACT_HL2MP_WALK_CROUCH_SUITCASE|ACT_HL2MP_WALK_CROUCH_ZOMBIE|ACT_HL2MP_WALK_CROUCH_ZOMBIE_01|ACT_HL2MP_WALK_CROUCH_ZOMBIE_02|ACT_HL2MP_WALK_CROUCH_ZOMBIE_03|ACT_HL2MP_WALK_CROUCH_ZOMBIE_04|ACT_HL2MP_WALK_CROUCH_ZOMBIE_05|ACT_HL2MP_WALK_DUEL|ACT_HL2MP_WALK_FIST|ACT_HL2MP_WALK_GRENADE|ACT_HL2MP_WALK_KNIFE|ACT_HL2MP_WALK_MAGIC|ACT_HL2MP_WALK_MELEE|ACT_HL2MP_WALK_MELEE2|ACT_HL2MP_WALK_PASSIVE|ACT_HL2MP_WALK_PHYSGUN|ACT_HL2MP_WALK_PISTOL|ACT_HL2MP_WALK_REVOLVER|ACT_HL2MP_WALK_RPG|ACT_HL2MP_WALK_SCARED|ACT_HL2MP_WALK_SHOTGUN|ACT_HL2MP_WALK_SLAM|ACT_HL2MP_WALK_SMG1|ACT_HL2MP_WALK_SUITCASE|ACT_HL2MP_WALK_ZOMBIE|ACT_HL2MP_WALK_ZOMBIE_01|ACT_HL2MP_WALK_ZOMBIE_02|ACT_HL2MP_WALK_ZOMBIE_03|ACT_HL2MP_WALK_ZOMBIE_04|ACT_HL2MP_WALK_ZOMBIE_05|ACT_HL2MP_WALK_ZOMBIE_06|ACT_HL2MP_ZOMBIE_SLUMP_IDLE|ACT_HL2MP_ZOMBIE_SLUMP_RISE|ACT_HOP|ACT_HOVER|ACT_IDLE|ACT_IDLETORUN|ACT_IDLE_AGITATED|ACT_IDLE_AIM_AGITATED|ACT_IDLE_AIM_RELAXED|ACT_IDLE_AIM_RIFLE_STIMULATED|ACT_IDLE_AIM_STEALTH|ACT_IDLE_AIM_STIMULATED|ACT_IDLE_ANGRY|ACT_IDLE_ANGRY_MELEE|ACT_IDLE_ANGRY_PISTOL|ACT_IDLE_ANGRY_RPG|ACT_IDLE_ANGRY_SHOTGUN|ACT_IDLE_ANGRY_SMG1|ACT_IDLE_CARRY|ACT_IDLE_HURT|ACT_IDLE_MANNEDGUN|ACT_IDLE_MELEE|ACT_IDLE_ON_FIRE|ACT_IDLE_PACKAGE|ACT_IDLE_PISTOL|ACT_IDLE_RELAXED|ACT_IDLE_RIFLE|ACT_IDLE_RPG|ACT_IDLE_RPG_RELAXED|ACT_IDLE_SHOTGUN_AGITATED|ACT_IDLE_SHOTGUN_RELAXED|ACT_IDLE_SHOTGUN_STIMULATED|ACT_IDLE_SMG1|ACT_IDLE_SMG1_RELAXED|ACT_IDLE_SMG1_STIMULATED|ACT_IDLE_STEALTH|ACT_IDLE_STEALTH_PISTOL|ACT_IDLE_STIMULATED|ACT_IDLE_SUITCASE|ACT_INVALID|ACT_JUMP|ACT_LAND|ACT_LEAP|ACT_LOOKBACK_LEFT|ACT_LOOKBACK_RIGHT|ACT_MELEE_ATTACK1|ACT_MELEE_ATTACK2|ACT_MELEE_ATTACK_SWING|ACT_MELEE_ATTACK_SWING_GESTURE|ACT_MP_AIRWALK|ACT_MP_AIRWALK_BUILDING|ACT_MP_AIRWALK_MELEE|ACT_MP_AIRWALK_PDA|ACT_MP_AIRWALK_PRIMARY|ACT_MP_AIRWALK_SECONDARY|ACT_MP_ATTACK_AIRWALK_BUILDING|ACT_MP_ATTACK_AIRWALK_GRENADE|ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING|ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE|ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY|ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY|ACT_MP_ATTACK_AIRWALK_MELEE|ACT_MP_ATTACK_AIRWALK_PRIMARY|ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE|ACT_MP_ATTACK_AIRWALK_SECONDARY|ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE|ACT_MP_ATTACK_CROUCH_BUILDING|ACT_MP_ATTACK_CROUCH_GRENADE|ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING|ACT_MP_ATTACK_CROUCH_GRENADE_MELEE|ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY|ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY|ACT_MP_ATTACK_CROUCH_MELEE|ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY|ACT_MP_ATTACK_CROUCH_POSTFIRE|ACT_MP_ATTACK_CROUCH_PREFIRE|ACT_MP_ATTACK_CROUCH_PRIMARY|ACT_MP_ATTACK_CROUCH_PRIMARYFIRE|ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED|ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED|ACT_MP_ATTACK_CROUCH_SECONDARY|ACT_MP_ATTACK_CROUCH_SECONDARYFIRE|ACT_MP_ATTACK_STAND_BUILDING|ACT_MP_ATTACK_STAND_GRENADE|ACT_MP_ATTACK_STAND_GRENADE_BUILDING|ACT_MP_ATTACK_STAND_GRENADE_MELEE|ACT_MP_ATTACK_STAND_GRENADE_PRIMARY|ACT_MP_ATTACK_STAND_GRENADE_SECONDARY|ACT_MP_ATTACK_STAND_MELEE|ACT_MP_ATTACK_STAND_MELEE_SECONDARY|ACT_MP_ATTACK_STAND_PDA|ACT_MP_ATTACK_STAND_POSTFIRE|ACT_MP_ATTACK_STAND_PREFIRE|ACT_MP_ATTACK_STAND_PRIMARY|ACT_MP_ATTACK_STAND_PRIMARYFIRE|ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED|ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED|ACT_MP_ATTACK_STAND_SECONDARY|ACT_MP_ATTACK_STAND_SECONDARYFIRE|ACT_MP_ATTACK_STAND_STARTFIRE|ACT_MP_ATTACK_SWIM_BUILDING|ACT_MP_ATTACK_SWIM_GRENADE|ACT_MP_ATTACK_SWIM_GRENADE_BUILDING|ACT_MP_ATTACK_SWIM_GRENADE_MELEE|ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY|ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY|ACT_MP_ATTACK_SWIM_MELEE|ACT_MP_ATTACK_SWIM_PDA|ACT_MP_ATTACK_SWIM_POSTFIRE|ACT_MP_ATTACK_SWIM_PREFIRE|ACT_MP_ATTACK_SWIM_PRIMARY|ACT_MP_ATTACK_SWIM_PRIMARYFIRE|ACT_MP_ATTACK_SWIM_SECONDARY|ACT_MP_ATTACK_SWIM_SECONDARYFIRE|ACT_MP_CROUCHWALK|ACT_MP_CROUCHWALK_BUILDING|ACT_MP_CROUCHWALK_MELEE|ACT_MP_CROUCHWALK_PDA|ACT_MP_CROUCHWALK_PRIMARY|ACT_MP_CROUCHWALK_SECONDARY|ACT_MP_CROUCH_BUILDING|ACT_MP_CROUCH_DEPLOYED|ACT_MP_CROUCH_DEPLOYED_IDLE|ACT_MP_CROUCH_IDLE|ACT_MP_CROUCH_MELEE|ACT_MP_CROUCH_PDA|ACT_MP_CROUCH_PRIMARY|ACT_MP_CROUCH_SECONDARY|ACT_MP_DEPLOYED|ACT_MP_DEPLOYED_IDLE|ACT_MP_DEPLOYED_PRIMARY|ACT_MP_DOUBLEJUMP|ACT_MP_GESTURE_FLINCH|ACT_MP_GESTURE_FLINCH_CHEST|ACT_MP_GESTURE_FLINCH_HEAD|ACT_MP_GESTURE_FLINCH_LEFTARM|ACT_MP_GESTURE_FLINCH_LEFTLEG|ACT_MP_GESTURE_FLINCH_MELEE|ACT_MP_GESTURE_FLINCH_PRIMARY|ACT_MP_GESTURE_FLINCH_RIGHTARM|ACT_MP_GESTURE_FLINCH_RIGHTLEG|ACT_MP_GESTURE_FLINCH_SECONDARY|ACT_MP_GESTURE_FLINCH_STOMACH|ACT_MP_GESTURE_VC_FINGERPOINT|ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING|ACT_MP_GESTURE_VC_FINGERPOINT_MELEE|ACT_MP_GESTURE_VC_FINGERPOINT_PDA|ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY|ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY|ACT_MP_GESTURE_VC_FISTPUMP|ACT_MP_GESTURE_VC_FISTPUMP_BUILDING|ACT_MP_GESTURE_VC_FISTPUMP_MELEE|ACT_MP_GESTURE_VC_FISTPUMP_PDA|ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY|ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY|ACT_MP_GESTURE_VC_HANDMOUTH|ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING|ACT_MP_GESTURE_VC_HANDMOUTH_MELEE|ACT_MP_GESTURE_VC_HANDMOUTH_PDA|ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY|ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY|ACT_MP_GESTURE_VC_NODNO|ACT_MP_GESTURE_VC_NODNO_BUILDING|ACT_MP_GESTURE_VC_NODNO_MELEE|ACT_MP_GESTURE_VC_NODNO_PDA|ACT_MP_GESTURE_VC_NODNO_PRIMARY|ACT_MP_GESTURE_VC_NODNO_SECONDARY|ACT_MP_GESTURE_VC_NODYES|ACT_MP_GESTURE_VC_NODYES_BUILDING|ACT_MP_GESTURE_VC_NODYES_MELEE|ACT_MP_GESTURE_VC_NODYES_PDA|ACT_MP_GESTURE_VC_NODYES_PRIMARY|ACT_MP_GESTURE_VC_NODYES_SECONDARY|ACT_MP_GESTURE_VC_THUMBSUP|ACT_MP_GESTURE_VC_THUMBSUP_BUILDING|ACT_MP_GESTURE_VC_THUMBSUP_MELEE|ACT_MP_GESTURE_VC_THUMBSUP_PDA|ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY|ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY|ACT_MP_GRENADE1_ATTACK|ACT_MP_GRENADE1_DRAW|ACT_MP_GRENADE1_IDLE|ACT_MP_GRENADE2_ATTACK|ACT_MP_GRENADE2_DRAW|ACT_MP_GRENADE2_IDLE|ACT_MP_JUMP|ACT_MP_JUMP_BUILDING|ACT_MP_JUMP_FLOAT|ACT_MP_JUMP_FLOAT_BUILDING|ACT_MP_JUMP_FLOAT_MELEE|ACT_MP_JUMP_FLOAT_PDA|ACT_MP_JUMP_FLOAT_PRIMARY|ACT_MP_JUMP_FLOAT_SECONDARY|ACT_MP_JUMP_LAND|ACT_MP_JUMP_LAND_BUILDING|ACT_MP_JUMP_LAND_MELEE|ACT_MP_JUMP_LAND_PDA|ACT_MP_JUMP_LAND_PRIMARY|ACT_MP_JUMP_LAND_SECONDARY|ACT_MP_JUMP_MELEE|ACT_MP_JUMP_PDA|ACT_MP_JUMP_PRIMARY|ACT_MP_JUMP_SECONDARY|ACT_MP_JUMP_START|ACT_MP_JUMP_START_BUILDING|ACT_MP_JUMP_START_MELEE|ACT_MP_JUMP_START_PDA|ACT_MP_JUMP_START_PRIMARY|ACT_MP_JUMP_START_SECONDARY|ACT_MP_MELEE_GRENADE1_ATTACK|ACT_MP_MELEE_GRENADE1_DRAW|ACT_MP_MELEE_GRENADE1_IDLE|ACT_MP_MELEE_GRENADE2_ATTACK|ACT_MP_MELEE_GRENADE2_DRAW|ACT_MP_MELEE_GRENADE2_IDLE|ACT_MP_PRIMARY_GRENADE1_ATTACK|ACT_MP_PRIMARY_GRENADE1_DRAW|ACT_MP_PRIMARY_GRENADE1_IDLE|ACT_MP_PRIMARY_GRENADE2_ATTACK|ACT_MP_PRIMARY_GRENADE2_DRAW|ACT_MP_PRIMARY_GRENADE2_IDLE|ACT_MP_RELOAD_AIRWALK|ACT_MP_RELOAD_AIRWALK_END|ACT_MP_RELOAD_AIRWALK_LOOP|ACT_MP_RELOAD_AIRWALK_PRIMARY|ACT_MP_RELOAD_AIRWALK_PRIMARY_END|ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP|ACT_MP_RELOAD_AIRWALK_SECONDARY|ACT_MP_RELOAD_AIRWALK_SECONDARY_END|ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP|ACT_MP_RELOAD_CROUCH|ACT_MP_RELOAD_CROUCH_END|ACT_MP_RELOAD_CROUCH_LOOP|ACT_MP_RELOAD_CROUCH_PRIMARY|ACT_MP_RELOAD_CROUCH_PRIMARY_END|ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP|ACT_MP_RELOAD_CROUCH_SECONDARY|ACT_MP_RELOAD_CROUCH_SECONDARY_END|ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP|ACT_MP_RELOAD_STAND|ACT_MP_RELOAD_STAND_END|ACT_MP_RELOAD_STAND_LOOP|ACT_MP_RELOAD_STAND_PRIMARY|ACT_MP_RELOAD_STAND_PRIMARY_END|ACT_MP_RELOAD_STAND_PRIMARY_LOOP|ACT_MP_RELOAD_STAND_SECONDARY|ACT_MP_RELOAD_STAND_SECONDARY_END|ACT_MP_RELOAD_STAND_SECONDARY_LOOP|ACT_MP_RELOAD_SWIM|ACT_MP_RELOAD_SWIM_END|ACT_MP_RELOAD_SWIM_LOOP|ACT_MP_RELOAD_SWIM_PRIMARY|ACT_MP_RELOAD_SWIM_PRIMARY_END|ACT_MP_RELOAD_SWIM_PRIMARY_LOOP|ACT_MP_RELOAD_SWIM_SECONDARY|ACT_MP_RELOAD_SWIM_SECONDARY_END|ACT_MP_RELOAD_SWIM_SECONDARY_LOOP|ACT_MP_RUN|ACT_MP_RUN_BUILDING|ACT_MP_RUN_MELEE|ACT_MP_RUN_PDA|ACT_MP_RUN_PRIMARY|ACT_MP_RUN_SECONDARY|ACT_MP_SECONDARY_GRENADE1_ATTACK|ACT_MP_SECONDARY_GRENADE1_DRAW|ACT_MP_SECONDARY_GRENADE1_IDLE|ACT_MP_SECONDARY_GRENADE2_ATTACK|ACT_MP_SECONDARY_GRENADE2_DRAW|ACT_MP_SECONDARY_GRENADE2_IDLE|ACT_MP_SPRINT|ACT_MP_STAND_BUILDING|ACT_MP_STAND_IDLE|ACT_MP_STAND_MELEE|ACT_MP_STAND_PDA|ACT_MP_STAND_PRIMARY|ACT_MP_STAND_SECONDARY|ACT_MP_SWIM|ACT_MP_SWIM_BUILDING|ACT_MP_SWIM_DEPLOYED|ACT_MP_SWIM_DEPLOYED_PRIMARY|ACT_MP_SWIM_IDLE|ACT_MP_SWIM_MELEE|ACT_MP_SWIM_PDA|ACT_MP_SWIM_PRIMARY|ACT_MP_SWIM_SECONDARY|ACT_MP_VCD|ACT_MP_WALK|ACT_MP_WALK_BUILDING|ACT_MP_WALK_MELEE|ACT_MP_WALK_PDA|ACT_MP_WALK_PRIMARY|ACT_MP_WALK_SECONDARY|ACT_OBJ_ASSEMBLING|ACT_OBJ_DETERIORATING|ACT_OBJ_DISMANTLING|ACT_OBJ_IDLE|ACT_OBJ_PLACING|ACT_OBJ_RUNNING|ACT_OBJ_STARTUP|ACT_OBJ_UPGRADING|ACT_OPEN_DOOR|ACT_OVERLAY_GRENADEIDLE|ACT_OVERLAY_GRENADEREADY|ACT_OVERLAY_PRIMARYATTACK|ACT_OVERLAY_SHIELD_ATTACK|ACT_OVERLAY_SHIELD_DOWN|ACT_OVERLAY_SHIELD_KNOCKBACK|ACT_OVERLAY_SHIELD_UP|ACT_OVERLAY_SHIELD_UP_IDLE|ACT_PHYSCANNON_ANIMATE|ACT_PHYSCANNON_ANIMATE_POST|ACT_PHYSCANNON_ANIMATE_PRE|ACT_PHYSCANNON_DETACH|ACT_PHYSCANNON_UPGRADE|ACT_PICKUP_GROUND|ACT_PICKUP_RACK|ACT_PLAYER_CROUCH_FIRE|ACT_PLAYER_CROUCH_WALK_FIRE|ACT_PLAYER_IDLE_FIRE|ACT_PLAYER_RUN_FIRE|ACT_PLAYER_WALK_FIRE|ACT_POLICE_HARASS1|ACT_POLICE_HARASS2|ACT_PRONE_FORWARD|ACT_PRONE_IDLE|ACT_RANGE_AIM_AR2_LOW|ACT_RANGE_AIM_LOW|ACT_RANGE_AIM_PISTOL_LOW|ACT_RANGE_AIM_SMG1_LOW|ACT_RANGE_ATTACK1|ACT_RANGE_ATTACK1_LOW|ACT_RANGE_ATTACK2|ACT_RANGE_ATTACK2_LOW|ACT_RANGE_ATTACK_AR1|ACT_RANGE_ATTACK_AR2|ACT_RANGE_ATTACK_AR2_GRENADE|ACT_RANGE_ATTACK_AR2_LOW|ACT_RANGE_ATTACK_HMG1|ACT_RANGE_ATTACK_ML|ACT_RANGE_ATTACK_PISTOL|ACT_RANGE_ATTACK_PISTOL_LOW|ACT_RANGE_ATTACK_RPG|ACT_RANGE_ATTACK_SHOTGUN|ACT_RANGE_ATTACK_SHOTGUN_LOW|ACT_RANGE_ATTACK_SLAM|ACT_RANGE_ATTACK_SMG1|ACT_RANGE_ATTACK_SMG1_LOW|ACT_RANGE_ATTACK_SMG2|ACT_RANGE_ATTACK_SNIPER_RIFLE|ACT_RANGE_ATTACK_THROW|ACT_RANGE_ATTACK_TRIPWIRE|ACT_RAPPEL_LOOP|ACT_READINESS_AGITATED_TO_STIMULATED|ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED|ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED|ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK|ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED|ACT_READINESS_RELAXED_TO_STIMULATED|ACT_READINESS_RELAXED_TO_STIMULATED_WALK|ACT_READINESS_STIMULATED_TO_RELAXED|ACT_RELOAD|ACT_RELOAD_FINISH|ACT_RELOAD_LOW|ACT_RELOAD_PISTOL|ACT_RELOAD_PISTOL_LOW|ACT_RELOAD_SHOTGUN|ACT_RELOAD_SHOTGUN_LOW|ACT_RELOAD_SMG1|ACT_RELOAD_SMG1_LOW|ACT_RELOAD_START|ACT_RESET|ACT_RIDE_MANNED_GUN|ACT_ROLL_LEFT|ACT_ROLL_RIGHT|ACT_RPG_DRAW_UNLOADED|ACT_RPG_FIDGET_UNLOADED|ACT_RPG_HOLSTER_UNLOADED|ACT_RPG_IDLE_UNLOADED|ACT_RUN|ACT_RUNTOIDLE|ACT_RUN_AGITATED|ACT_RUN_AIM|ACT_RUN_AIM_AGITATED|ACT_RUN_AIM_PISTOL|ACT_RUN_AIM_RELAXED|ACT_RUN_AIM_RIFLE|ACT_RUN_AIM_RIFLE_STIMULATED|ACT_RUN_AIM_SHOTGUN|ACT_RUN_AIM_STEALTH|ACT_RUN_AIM_STEALTH_PISTOL|ACT_RUN_AIM_STIMULATED|ACT_RUN_CROUCH|ACT_RUN_CROUCH_AIM|ACT_RUN_CROUCH_AIM_RIFLE|ACT_RUN_CROUCH_RIFLE|ACT_RUN_CROUCH_RPG|ACT_RUN_HURT|ACT_RUN_ON_FIRE|ACT_RUN_PISTOL|ACT_RUN_PROTECTED|ACT_RUN_RELAXED|ACT_RUN_RIFLE|ACT_RUN_RIFLE_RELAXED|ACT_RUN_RIFLE_STIMULATED|ACT_RUN_RPG|ACT_RUN_RPG_RELAXED|ACT_RUN_SCARED|ACT_RUN_STEALTH|ACT_RUN_STEALTH_PISTOL|ACT_RUN_STIMULATED|ACT_SCRIPT_CUSTOM_MOVE|ACT_SHIELD_ATTACK|ACT_SHIELD_DOWN|ACT_SHIELD_KNOCKBACK|ACT_SHIELD_UP|ACT_SHIELD_UP_IDLE|ACT_SHIPLADDER_DOWN|ACT_SHIPLADDER_UP|ACT_SHOTGUN_IDLE4|ACT_SHOTGUN_IDLE_DEEP|ACT_SHOTGUN_PUMP|ACT_SHOTGUN_RELOAD_FINISH|ACT_SHOTGUN_RELOAD_START|ACT_SIGNAL1|ACT_SIGNAL2|ACT_SIGNAL3|ACT_SIGNAL_ADVANCE|ACT_SIGNAL_FORWARD|ACT_SIGNAL_GROUP|ACT_SIGNAL_HALT|ACT_SIGNAL_LEFT|ACT_SIGNAL_RIGHT|ACT_SIGNAL_TAKECOVER|ACT_SLAM_DETONATOR_DETONATE|ACT_SLAM_DETONATOR_DRAW|ACT_SLAM_DETONATOR_HOLSTER|ACT_SLAM_DETONATOR_IDLE|ACT_SLAM_DETONATOR_STICKWALL_DRAW|ACT_SLAM_DETONATOR_THROW_DRAW|ACT_SLAM_STICKWALL_ATTACH|ACT_SLAM_STICKWALL_ATTACH2|ACT_SLAM_STICKWALL_DETONATE|ACT_SLAM_STICKWALL_DETONATOR_HOLSTER|ACT_SLAM_STICKWALL_DRAW|ACT_SLAM_STICKWALL_IDLE|ACT_SLAM_STICKWALL_ND_ATTACH|ACT_SLAM_STICKWALL_ND_ATTACH2|ACT_SLAM_STICKWALL_ND_DRAW|ACT_SLAM_STICKWALL_ND_IDLE|ACT_SLAM_STICKWALL_TO_THROW|ACT_SLAM_STICKWALL_TO_THROW_ND|ACT_SLAM_STICKWALL_TO_TRIPMINE_ND|ACT_SLAM_THROW_DETONATE|ACT_SLAM_THROW_DETONATOR_HOLSTER|ACT_SLAM_THROW_DRAW|ACT_SLAM_THROW_IDLE|ACT_SLAM_THROW_ND_DRAW|ACT_SLAM_THROW_ND_IDLE|ACT_SLAM_THROW_THROW|ACT_SLAM_THROW_THROW2|ACT_SLAM_THROW_THROW_ND|ACT_SLAM_THROW_THROW_ND2|ACT_SLAM_THROW_TO_STICKWALL|ACT_SLAM_THROW_TO_STICKWALL_ND|ACT_SLAM_THROW_TO_TRIPMINE_ND|ACT_SLAM_TRIPMINE_ATTACH|ACT_SLAM_TRIPMINE_ATTACH2|ACT_SLAM_TRIPMINE_DRAW|ACT_SLAM_TRIPMINE_IDLE|ACT_SLAM_TRIPMINE_TO_STICKWALL_ND|ACT_SLAM_TRIPMINE_TO_THROW_ND|ACT_SMALL_FLINCH|ACT_SMG2_DRAW2|ACT_SMG2_DRYFIRE2|ACT_SMG2_FIRE2|ACT_SMG2_IDLE2|ACT_SMG2_RELOAD2|ACT_SMG2_TOAUTO|ACT_SMG2_TOBURST|ACT_SPECIAL_ATTACK1|ACT_SPECIAL_ATTACK2|ACT_SPRINT|ACT_STAND|ACT_STARTDYING|ACT_STEP_BACK|ACT_STEP_FORE|ACT_STEP_LEFT|ACT_STEP_RIGHT|ACT_STRAFE_LEFT|ACT_STRAFE_RIGHT|ACT_SWIM|ACT_SWIM_IDLE|ACT_TRANSITION|ACT_TRIPMINE_GROUND|ACT_TRIPMINE_WORLD|ACT_TURN|ACT_TURNLEFT45|ACT_TURNRIGHT45|ACT_TURN_LEFT|ACT_TURN_RIGHT|ACT_UNDEPLOY|ACT_USE|ACT_VICTORY_DANCE|ACT_VM_ATTACH_SILENCER|ACT_VM_CRAWL|ACT_VM_CRAWL_EMPTY|ACT_VM_CRAWL_M203|ACT_VM_DEPLOY|ACT_VM_DEPLOYED_DRYFIRE|ACT_VM_DEPLOYED_FIRE|ACT_VM_DEPLOYED_IDLE|ACT_VM_DEPLOYED_IN|ACT_VM_DEPLOYED_IRON_DRYFIRE|ACT_VM_DEPLOYED_IRON_FIRE|ACT_VM_DEPLOYED_IRON_IDLE|ACT_VM_DEPLOYED_IRON_IN|ACT_VM_DEPLOYED_IRON_OUT|ACT_VM_DEPLOYED_LIFTED_IDLE|ACT_VM_DEPLOYED_LIFTED_IN|ACT_VM_DEPLOYED_LIFTED_OUT|ACT_VM_DEPLOYED_OUT|ACT_VM_DEPLOYED_RELOAD|ACT_VM_DEPLOYED_RELOAD_EMPTY|ACT_VM_DEPLOY_1|ACT_VM_DEPLOY_2|ACT_VM_DEPLOY_3|ACT_VM_DEPLOY_4|ACT_VM_DEPLOY_5|ACT_VM_DEPLOY_6|ACT_VM_DEPLOY_7|ACT_VM_DEPLOY_8|ACT_VM_DEPLOY_EMPTY|ACT_VM_DETACH_SILENCER|ACT_VM_DFIREMODE|ACT_VM_DIFIREMODE|ACT_VM_DOWN|ACT_VM_DOWN_EMPTY|ACT_VM_DOWN_M203|ACT_VM_DRAW|ACT_VM_DRAWFULL_M203|ACT_VM_DRAW_DEPLOYED|ACT_VM_DRAW_EMPTY|ACT_VM_DRAW_M203|ACT_VM_DRAW_SILENCED|ACT_VM_DRYFIRE|ACT_VM_DRYFIRE_LEFT|ACT_VM_DRYFIRE_SILENCED|ACT_VM_FIDGET|ACT_VM_FIREMODE|ACT_VM_FIRE_TO_EMPTY|ACT_VM_FIZZLE|ACT_VM_HAULBACK|ACT_VM_HITCENTER|ACT_VM_HITCENTER2|ACT_VM_HITKILL|ACT_VM_HITLEFT|ACT_VM_HITLEFT2|ACT_VM_HITRIGHT|ACT_VM_HITRIGHT2|ACT_VM_HOLSTER|ACT_VM_HOLSTERFULL_M203|ACT_VM_HOLSTER_EMPTY|ACT_VM_HOLSTER_M203|ACT_VM_IDLE|ACT_VM_IDLE_1|ACT_VM_IDLE_2|ACT_VM_IDLE_3|ACT_VM_IDLE_4|ACT_VM_IDLE_5|ACT_VM_IDLE_6|ACT_VM_IDLE_7|ACT_VM_IDLE_8|ACT_VM_IDLE_DEPLOYED|ACT_VM_IDLE_DEPLOYED_1|ACT_VM_IDLE_DEPLOYED_2|ACT_VM_IDLE_DEPLOYED_3|ACT_VM_IDLE_DEPLOYED_4|ACT_VM_IDLE_DEPLOYED_5|ACT_VM_IDLE_DEPLOYED_6|ACT_VM_IDLE_DEPLOYED_7|ACT_VM_IDLE_DEPLOYED_8|ACT_VM_IDLE_DEPLOYED_EMPTY|ACT_VM_IDLE_EMPTY|ACT_VM_IDLE_EMPTY_LEFT|ACT_VM_IDLE_LOWERED|ACT_VM_IDLE_M203|ACT_VM_IDLE_SILENCED|ACT_VM_IDLE_TO_LOWERED|ACT_VM_IFIREMODE|ACT_VM_IIDLE|ACT_VM_IIDLE_EMPTY|ACT_VM_IIDLE_M203|ACT_VM_IIN|ACT_VM_IIN_EMPTY|ACT_VM_IIN_M203|ACT_VM_IOUT|ACT_VM_IOUT_EMPTY|ACT_VM_IOUT_M203|ACT_VM_IRECOIL1|ACT_VM_IRECOIL2|ACT_VM_ISHOOT|ACT_VM_ISHOOTDRY|ACT_VM_ISHOOT_LAST|ACT_VM_ISHOOT_M203|ACT_VM_LOWERED_TO_IDLE|ACT_VM_MISSCENTER|ACT_VM_MISSCENTER2|ACT_VM_MISSLEFT|ACT_VM_MISSLEFT2|ACT_VM_MISSRIGHT|ACT_VM_MISSRIGHT2|ACT_VM_PICKUP|ACT_VM_PRIMARYATTACK|ACT_VM_PRIMARYATTACK_1|ACT_VM_PRIMARYATTACK_2|ACT_VM_PRIMARYATTACK_3|ACT_VM_PRIMARYATTACK_4|ACT_VM_PRIMARYATTACK_5|ACT_VM_PRIMARYATTACK_6|ACT_VM_PRIMARYATTACK_7|ACT_VM_PRIMARYATTACK_8|ACT_VM_PRIMARYATTACK_DEPLOYED|ACT_VM_PRIMARYATTACK_DEPLOYED_1|ACT_VM_PRIMARYATTACK_DEPLOYED_2|ACT_VM_PRIMARYATTACK_DEPLOYED_3|ACT_VM_PRIMARYATTACK_DEPLOYED_4|ACT_VM_PRIMARYATTACK_DEPLOYED_5|ACT_VM_PRIMARYATTACK_DEPLOYED_6|ACT_VM_PRIMARYATTACK_DEPLOYED_7|ACT_VM_PRIMARYATTACK_DEPLOYED_8|ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY|ACT_VM_PRIMARYATTACK_EMPTY|ACT_VM_PRIMARYATTACK_SILENCED|ACT_VM_PULLBACK|ACT_VM_PULLBACK_HIGH|ACT_VM_PULLBACK_HIGH_BAKE|ACT_VM_PULLBACK_LOW|ACT_VM_PULLPIN|ACT_VM_READY|ACT_VM_READY_M203|ACT_VM_RECOIL1|ACT_VM_RECOIL2|ACT_VM_RECOIL3|ACT_VM_RELEASE|ACT_VM_RELOAD|ACT_VM_RELOAD2|ACT_VM_RELOADEMPTY|ACT_VM_RELOAD_DEPLOYED|ACT_VM_RELOAD_EMPTY|ACT_VM_RELOAD_END|ACT_VM_RELOAD_END_EMPTY|ACT_VM_RELOAD_IDLE|ACT_VM_RELOAD_INSERT|ACT_VM_RELOAD_INSERT_EMPTY|ACT_VM_RELOAD_INSERT_PULL|ACT_VM_RELOAD_M203|ACT_VM_RELOAD_SILENCED|ACT_VM_SECONDARYATTACK|ACT_VM_SHOOTLAST|ACT_VM_SPRINT_ENTER|ACT_VM_SPRINT_IDLE|ACT_VM_SPRINT_LEAVE|ACT_VM_SWINGHARD|ACT_VM_SWINGHIT|ACT_VM_SWINGMISS|ACT_VM_THROW|ACT_VM_UNDEPLOY|ACT_VM_UNDEPLOY_1|ACT_VM_UNDEPLOY_2|ACT_VM_UNDEPLOY_3|ACT_VM_UNDEPLOY_4|ACT_VM_UNDEPLOY_5|ACT_VM_UNDEPLOY_6|ACT_VM_UNDEPLOY_7|ACT_VM_UNDEPLOY_8|ACT_VM_UNDEPLOY_EMPTY|ACT_VM_UNLOAD|ACT_VM_UNUSABLE|ACT_VM_UNUSABLE_TO_USABLE|ACT_VM_USABLE_TO_UNUSABLE|ACT_WALK|ACT_WALK_AGITATED|ACT_WALK_AIM|ACT_WALK_AIM_AGITATED|ACT_WALK_AIM_PISTOL|ACT_WALK_AIM_RELAXED|ACT_WALK_AIM_RIFLE|ACT_WALK_AIM_RIFLE_STIMULATED|ACT_WALK_AIM_SHOTGUN|ACT_WALK_AIM_STEALTH|ACT_WALK_AIM_STEALTH_PISTOL|ACT_WALK_AIM_STIMULATED|ACT_WALK_ANGRY|ACT_WALK_CARRY|ACT_WALK_CROUCH|ACT_WALK_CROUCH_AIM|ACT_WALK_CROUCH_AIM_RIFLE|ACT_WALK_CROUCH_RIFLE|ACT_WALK_CROUCH_RPG|ACT_WALK_HURT|ACT_WALK_ON_FIRE|ACT_WALK_PACKAGE|ACT_WALK_PISTOL|ACT_WALK_RELAXED|ACT_WALK_RIFLE|ACT_WALK_RIFLE_RELAXED|ACT_WALK_RIFLE_STIMULATED|ACT_WALK_RPG|ACT_WALK_RPG_RELAXED|ACT_WALK_SCARED|ACT_WALK_STEALTH|ACT_WALK_STEALTH_PISTOL|ACT_WALK_STIMULATED|ACT_WALK_SUITCASE|ACT_ZOMBIE_CLIMB_END|ACT_ZOMBIE_CLIMB_START|ACT_ZOMBIE_CLIMB_UP|ACT_ZOMBIE_LEAPING|ACT_ZOMBIE_LEAP_START|ALL_VISIBLE_CONTENTS|AMMO_AIRBOATGUN|AMMO_JEEPPRIMARY|BLOOD_COLOR_ANTLION|BLOOD_COLOR_ANTLION_WORKER|BLOOD_COLOR_GREEN|BLOOD_COLOR_MECH|BLOOD_COLOR_RED|BLOOD_COLOR_YELLOW|BLOOD_COLOR_ZOMBIE|BONE_ALWAYS_PROCEDURAL|BONE_CALCULATE_MASK|BONE_HEAD|BONE_LEFT_CALF|BONE_LEFT_CLAVICLE|BONE_LEFT_FOOT|BONE_LEFT_FOREARM|BONE_LEFT_HAND|BONE_LEFT_THIGH|BONE_LEFT_TOE|BONE_LEFT_UPPERARM|BONE_NECK|BONE_PELVIS|BONE_PHYSICALLY_SIMULATED|BONE_PHYSICS_PROCEDURAL|BONE_RIGHT_CALF|BONE_RIGHT_CLAVICLE|BONE_RIGHT_FOOT|BONE_RIGHT_FOREARM|BONE_RIGHT_HAND|BONE_RIGHT_THIGH|BONE_RIGHT_TOE|BONE_RIGHT_UPPERARM|BONE_SCREEN_ALIGN_CYLINDER|BONE_SCREEN_ALIGN_SPHERE|BONE_SPINE0|BONE_SPINE1|BONE_SPINE2|BONE_SPINE3|BONE_SPINE4|BONE_USED_BY_ANYTHING|BONE_USED_BY_ATTACHMENT|BONE_USED_BY_BONE_MERGE|BONE_USED_BY_HITBOX|BONE_USED_BY_VERTEX_LOD0|BONE_USED_BY_VERTEX_LOD1|BONE_USED_BY_VERTEX_LOD2|BONE_USED_BY_VERTEX_LOD3|BONE_USED_BY_VERTEX_LOD4|BONE_USED_BY_VERTEX_LOD5|BONE_USED_BY_VERTEX_LOD6|BONE_USED_BY_VERTEX_LOD7|BONE_USED_BY_VERTEX_MASK|BONE_USED_MASK|BOX_BACK|BOX_BOTTOM|BOX_FRONT|BOX_LEFT|BOX_RIGHT|BOX_TOP|BRANCH|BSP_LUMP_BRUSHES|BSP_LUMP_BRUSHSIDES|BSP_LUMP_DISPINFO|BSP_LUMP_PLANES|BSP_LUMP_TEXDATA|BSP_LUMP_TEXDATA_STRING_DATA|BSP_LUMP_TEXDATA_STRING_TABLE|BSP_LUMP_TEXINFO|BUTTON_CODE_COUNT|BUTTON_CODE_INVALID|BUTTON_CODE_LAST|BUTTON_CODE_NONE|CAP_AIM_GUN|CAP_ANIMATEDFACE|CAP_AUTO_DOORS|CAP_DUCK|CAP_FRIENDLY_DMG_IMMUNE|CAP_INNATE_MELEE_ATTACK1|CAP_INNATE_MELEE_ATTACK2|CAP_INNATE_RANGE_ATTACK1|CAP_INNATE_RANGE_ATTACK2|CAP_MOVE_CLIMB|CAP_MOVE_CRAWL|CAP_MOVE_FLY|CAP_MOVE_GROUND|CAP_MOVE_JUMP|CAP_MOVE_SHOOT|CAP_MOVE_SWIM|CAP_NO_HIT_PLAYER|CAP_NO_HIT_SQUADMATES|CAP_OPEN_DOORS|CAP_SIMPLE_RADIUS_DAMAGE|CAP_SKIP_NAV_GROUND_CHECK|CAP_SQUAD|CAP_TURN_HEAD|CAP_USE|CAP_USE_SHOT_REGULATOR|CAP_USE_WEAPONS|CAP_WEAPON_MELEE_ATTACK1|CAP_WEAPON_MELEE_ATTACK2|CAP_WEAPON_RANGE_ATTACK1|CAP_WEAPON_RANGE_ATTACK2|CARRY_WEIGHT_LIMIT|CHAN_AUTO|CHAN_BODY|CHAN_ITEM|CHAN_REPLACE|CHAN_STATIC|CHAN_STREAM|CHAN_USER_BASE|CHAN_VOICE|CHAN_VOICE2|CHAN_VOICE_BASE|CHAN_WEAPON|CLASS_ANTLION|CLASS_BARNACLE|CLASS_BULLSEYE|CLASS_CITIZEN_PASSIVE|CLASS_CITIZEN_REBEL|CLASS_COMBINE|CLASS_COMBINE_GUNSHIP|CLASS_COMBINE_HUNTER|CLASS_CONSCRIPT|CLASS_EARTH_FAUNA|CLASS_FLARE|CLASS_HACKED_ROLLERMINE|CLASS_HEADCRAB|CLASS_MANHACK|CLASS_METROPOLICE|CLASS_MILITARY|CLASS_MISSILE|CLASS_NONE|CLASS_PLAYER|CLASS_PLAYER_ALLY|CLASS_PLAYER_ALLY_VITAL|CLASS_PROTOSNIPER|CLASS_SCANNER|CLASS_STALKER|CLASS_VORTIGAUNT|CLASS_ZOMBIE|CLC_LASTMSG|COLLISION_GROUP_BREAKABLE_GLASS|COLLISION_GROUP_DEBRIS|COLLISION_GROUP_DEBRIS_TRIGGER|COLLISION_GROUP_DISSOLVING|COLLISION_GROUP_DOOR_BLOCKER|COLLISION_GROUP_INTERACTIVE|COLLISION_GROUP_INTERACTIVE_DEBRIS|COLLISION_GROUP_IN_VEHICLE|COLLISION_GROUP_NONE|COLLISION_GROUP_NPC|COLLISION_GROUP_NPC_ACTOR|COLLISION_GROUP_NPC_SCRIPTED|COLLISION_GROUP_PASSABLE_DOOR|COLLISION_GROUP_PLAYER|COLLISION_GROUP_PLAYER_MOVEMENT|COLLISION_GROUP_PROJECTILE|COLLISION_GROUP_PUSHAWAY|COLLISION_GROUP_VEHICLE|COLLISION_GROUP_VEHICLE_CLIP|COLLISION_GROUP_WEAPON|COLLISION_GROUP_WORLD|CONTENTS_AREAPORTAL|CONTENTS_AUX|CONTENTS_BLOCKLOS|CONTENTS_CURRENT_0|CONTENTS_CURRENT_180|CONTENTS_CURRENT_270|CONTENTS_CURRENT_90|CONTENTS_CURRENT_DOWN|CONTENTS_CURRENT_UP|CONTENTS_DEBRIS|CONTENTS_DETAIL|CONTENTS_EMPTY|CONTENTS_GRATE|CONTENTS_HITBOX|CONTENTS_IGNORE_NODRAW_OPAQUE|CONTENTS_LADDER|CONTENTS_MONSTER|CONTENTS_MONSTERCLIP|CONTENTS_MOVEABLE|CONTENTS_OPAQUE|CONTENTS_ORIGIN|CONTENTS_PLAYERCLIP|CONTENTS_SLIME|CONTENTS_SOLID|CONTENTS_TEAM1|CONTENTS_TEAM2|CONTENTS_TEAM3|CONTENTS_TEAM4|CONTENTS_TESTFOGVOLUME|CONTENTS_TRANSLUCENT|CONTENTS_WATER|CONTENTS_WINDOW|CONTINUOUS_USE|CS_338MAG|CS_357SIG|CS_45ACP|CS_50AE|CS_556MM|CS_556MM_BOX|CS_57MM|CS_762MM|CS_9MM|CS_BUCKSHOT|CS_FLASHBANG|CS_HEGRENADE|CS_MAX_338MAG|CS_MAX_356SIG|CS_MAX_45ACP|CS_MAX_50AE|CS_MAX_556MM|CS_MAX_556M_BOX|CS_MAX_57MM|CS_MAX_762MM|CS_MAX_9MM|CS_MAX_BUCKSHOT|CS_SMOKEGRENADE|CS_WEAPONTYPE_C4|CS_WEAPONTYPE_GRENADE|CS_WEAPONTYPE_KNIFE|CS_WEAPONTYPE_MACHINEGUN|CS_WEAPONTYPE_PISTOL|CS_WEAPONTYPE_RIFLE|CS_WEAPONTYPE_SHOTGUN|CS_WEAPONTYPE_SNIPER_RIFLE|CS_WEAPONTYPE_SUBMACHINEGUN|CS_WEAPONTYPE_UNKNOWN|CS_WEAPON_AK47|CS_WEAPON_AUG|CS_WEAPON_AWP|CS_WEAPON_C4|CS_WEAPON_DEAGLE|CS_WEAPON_ELITE|CS_WEAPON_FAMAS|CS_WEAPON_FIVESEVEN|CS_WEAPON_FLASHBANG|CS_WEAPON_G3SG1|CS_WEAPON_GALIL|CS_WEAPON_GLOCK|CS_WEAPON_HEGRENADE|CS_WEAPON_KNIFE|CS_WEAPON_M249|CS_WEAPON_M3|CS_WEAPON_M4A1|CS_WEAPON_MAC10|CS_WEAPON_MP5NAVY|CS_WEAPON_P228|CS_WEAPON_P90|CS_WEAPON_SCOUT|CS_WEAPON_SG550|CS_WEAPON_SG552|CS_WEAPON_SMOKEGRENADE|CS_WEAPON_TMP|CS_WEAPON_UMP45|CS_WEAPON_USP|CS_WEAPON_XM1014|CT_DEFAULT|CT_DOWNTRODDEN|CT_REBEL|CT_REFUGEE|CT_UNIQUE|CVAR_PREFIX|DEFAULT_RATE|DIRECTIONAL_USE|DMG_ACID|DMG_AIRBOAT|DMG_ALWAYSGIB|DMG_BLAST|DMG_BLAST_SURFACE|DMG_BUCKSHOT|DMG_BULLET|DMG_BURN|DMG_CLUB|DMG_CRUSH|DMG_DIRECT|DMG_DISSOLVE|DMG_DROWN|DMG_DROWNRECOVER|DMG_ENERGYBEAM|DMG_FALL|DMG_GENERIC|DMG_NERVEGAS|DMG_NEVERGIB|DMG_PARALYZE|DMG_PHYSGUN|DMG_PLASMA|DMG_POISON|DMG_PREVENT_PHYSICS_FORCE|DMG_RADIATION|DMG_REMOVENORAGDOLL|DMG_SHOCK|DMG_SLASH|DMG_SLOWBURN|DMG_SONIC|DMG_VEHICLE|DONT_BLEED|D_ER|D_FR|D_HT|D_LI|D_NU|EFL_BOT_FROZEN|EFL_CHECK_UNTOUCH|EFL_DIRTY_ABSANGVELOCITY|EFL_DIRTY_ABSTRANSFORM|EFL_DIRTY_ABSVELOCITY|EFL_DIRTY_SHADOWUPDATE|EFL_DIRTY_SPATIAL_PARTITION|EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS|EFL_DONTBLOCKLOS|EFL_DONTWALKON|EFL_DORMANT|EFL_FORCE_CHECK_TRANSMIT|EFL_HAS_PLAYER_CHILD|EFL_IN_SKYBOX|EFL_IS_BEING_LIFTED_BY_BARNACLE|EFL_KEEP_ON_RECREATE_ENTITIES|EFL_KILLME|EFL_NOCLIP_ACTIVE|EFL_NOTIFY|EFL_NO_AUTO_EDICT_ATTACH|EFL_NO_DAMAGE_FORCES|EFL_NO_DISSOLVE|EFL_NO_GAME_PHYSICS_SIMULATION|EFL_NO_MEGAPHYSCANNON_RAGDOLL|EFL_NO_PHYSCANNON_INTERACTION|EFL_NO_ROTORWASH_PUSH|EFL_NO_THINK_FUNCTION|EFL_NO_WATER_VELOCITY_CHANGE|EFL_SERVER_ONLY|EFL_SETTING_UP_BONES|EFL_TOUCHING_FLUID|EFL_USE_PARTITION_WHEN_NOT_SOLID|EF_BONEMERGE|EF_BONEMERGE_FASTCULL|EF_BRIGHTLIGHT|EF_DIMLIGHT|EF_ITEM_BLINK|EF_NODRAW|EF_NOINTERP|EF_NORECEIVESHADOW|EF_NOSHADOW|EF_PARENT_ANIMATES|FCVAR_ARCHIVE|FCVAR_ARCHIVE_XBOX|FCVAR_CHEAT|FCVAR_CLIENTCMD_CAN_EXECUTE|FCVAR_CLIENTDLL|FCVAR_DEMO|FCVAR_DONTRECORD|FCVAR_GAMEDLL|FCVAR_NEVER_AS_STRING|FCVAR_NONE|FCVAR_NOTIFY|FCVAR_NOT_CONNECTED|FCVAR_PRINTABLEONLY|FCVAR_PROTECTED|FCVAR_REPLICATED|FCVAR_SERVER_CANNOT_QUERY|FCVAR_SERVER_CAN_EXECUTE|FCVAR_SPONLY|FCVAR_UNLOGGED|FCVAR_UNREGISTERED|FCVAR_USERINFO|FHDR_DELETE|FHDR_ENTERPVS|FHDR_LEAVEPVS|FHDR_ZERO|FLOW_INCOMING|FLOW_OUTGOING|FL_AIMTARGET|FL_ANIMDUCKING|FL_ATCONTROLS|FL_BASEVELOCITY|FL_CLIENT|FL_CONVEYOR|FL_DISSOLVING|FL_DONTTOUCH|FL_DUCKING|FL_FAKECLIENT|FL_FLY|FL_FROZEN|FL_GODMODE|FL_GRAPHED|FL_GRENADE|FL_INRAIN|FL_INWATER|FL_KILLME|FL_NOTARGET|FL_NPC|FL_OBJECT|FL_ONFIRE|FL_ONGROUND|FL_ONTRAIN|FL_PARTIALGROUND|FL_STATICPROP|FL_STEPMOVEMENT|FL_SWIM|FL_TRANSRAGDOLL|FL_UNBLOCKABLE_BY_PLAYER|FL_WATERJUMP|FL_WORLDBRUSH|FORCE_BOOL|FORCE_NUMBER|FORCE_STRING|FRAG_FILE_STREAM|FRAG_NORMAL_STREAM|FSOLID_CUSTOMBOXTEST|FSOLID_CUSTOMRAYTEST|FSOLID_FORCE_WORLD_ALIGNED|FSOLID_MAX_BITS|FSOLID_NOT_SOLID|FSOLID_NOT_STANDABLE|FSOLID_ROOT_PARENT_ALIGNED|FSOLID_TRIGGER|FSOLID_TRIGGER_TOUCH_DEBRIS|FSOLID_USE_TRIGGER_BOUNDS|FSOLID_VOLUME_CONTENTS|FVPHYSICS_CONSTRAINT_STATIC|FVPHYSICS_DMG_DISSOLVE|FVPHYSICS_DMG_SLICE|FVPHYSICS_HEAVY_OBJECT|FVPHYSICS_MULTIOBJECT_ENTITY|FVPHYSICS_NO_IMPACT_DMG|FVPHYSICS_NO_NPC_IMPACT_DMG|FVPHYSICS_NO_PLAYER_PICKUP|FVPHYSICS_NO_SELF_COLLISIONS|FVPHYSICS_PART_OF_RAGDOLL|FVPHYSICS_PENETRATING|FVPHYSICS_PLAYER_HELD|FVPHYSICS_WAS_THROWN|GAMEMODE_NAME|GESTURE_SLOT_ATTACK_AND_RELOAD|GESTURE_SLOT_CUSTOM|GESTURE_SLOT_FLINCH|GESTURE_SLOT_GRENADE|GESTURE_SLOT_JUMP|GESTURE_SLOT_SWIM|GESTURE_SLOT_VCD|GMOD_MAXDTVARS|HITGROUP_CHEST|HITGROUP_GEAR|HITGROUP_GENERIC|HITGROUP_HEAD|HITGROUP_LEFTARM|HITGROUP_LEFTLEG|HITGROUP_RIGHTARM|HITGROUP_RIGHTLEG|HITGROUP_STOMACH|HUD_PRINTCENTER|HUD_PRINTCONSOLE|HUD_PRINTNOTIFY|HUD_PRINTTALK|HULL_HUMAN|HULL_LARGE|HULL_LARGE_CENTERED|HULL_MEDIUM|HULL_MEDIUM_TALL|HULL_SMALL_CENTERED|HULL_TINY|HULL_TINY_CENTERED|HULL_WIDE_HUMAN|HULL_WIDE_SHORT|INSTANCE_BASELINE_TABLENAME|INSTNET_HEAR|INSTNET_PLAY|INSTNET_USE|IN_ALT1|IN_ALT2|IN_ATTACK|IN_ATTACK2|IN_BACK|IN_BULLRUSH|IN_CANCEL|IN_DUCK|IN_FORWARD|IN_GRENADE1|IN_GRENADE2|IN_JUMP|IN_LEFT|IN_MOVELEFT|IN_MOVERIGHT|IN_RELOAD|IN_RIGHT|IN_RUN|IN_SCORE|IN_SPEED|IN_USE|IN_WALK|IN_WEAPON1|IN_WEAPON2|IN_ZOOM|IRCRELAY_EVENT_ACTION|IRCRELAY_EVENT_ATTACH|IRCRELAY_EVENT_CONNECT|IRCRELAY_EVENT_DEATTACH|IRCRELAY_EVENT_DISCONNECT|IRCRELAY_EVENT_JOIN|IRCRELAY_EVENT_KICK|IRCRELAY_EVENT_MKICK|IRCRELAY_EVENT_NICK|IRCRELAY_EVENT_PART|IRCRELAY_EVENT_PRIVMSG|IRCRELAY_VALIDATION_LVL_AUTHED|IRCRELAY_VALIDATION_LVL_NORMAL|IRCRELAY_VALIDATION_LVL_PROBLEM|IRCRELAY_VALIDATION_LVL_UNKNOWN|IRCRELAY_VALIDATION_LVL_VALIDATED|JOYSTICK_FIRST|JOYSTICK_FIRST_AXIS_BUTTON|JOYSTICK_FIRST_BUTTON|JOYSTICK_FIRST_POV_BUTTON|JOYSTICK_LAST|JOYSTICK_LAST_AXIS_BUTTON|JOYSTICK_LAST_BUTTON|JOYSTICK_LAST_POV_BUTTON|KEY_0|KEY_1|KEY_2|KEY_3|KEY_4|KEY_5|KEY_6|KEY_7|KEY_8|KEY_9|KEY_A|KEY_APOSTROPHE|KEY_APP|KEY_B|KEY_BACKQUOTE|KEY_BACKSLASH|KEY_BACKSPACE|KEY_BREAK|KEY_C|KEY_CAPSLOCK|KEY_CAPSLOCKTOGGLE|KEY_COMMA|KEY_COUNT|KEY_D|KEY_DELETE|KEY_DOWN|KEY_E|KEY_END|KEY_ENTER|KEY_EQUAL|KEY_ESCAPE|KEY_F|KEY_F1|KEY_F10|KEY_F11|KEY_F12|KEY_F2|KEY_F3|KEY_F4|KEY_F5|KEY_F6|KEY_F7|KEY_F8|KEY_F9|KEY_FIRST|KEY_G|KEY_H|KEY_HOME|KEY_I|KEY_INSERT|KEY_J|KEY_K|KEY_L|KEY_LALT|KEY_LAST|KEY_LBRACKET|KEY_LCONTROL|KEY_LEFT|KEY_LSHIFT|KEY_LWIN|KEY_M|KEY_MINUS|KEY_N|KEY_NONE|KEY_NUMLOCK|KEY_NUMLOCKTOGGLE|KEY_O|KEY_P|KEY_PAD_0|KEY_PAD_1|KEY_PAD_2|KEY_PAD_3|KEY_PAD_4|KEY_PAD_5|KEY_PAD_6|KEY_PAD_7|KEY_PAD_8|KEY_PAD_9|KEY_PAD_DECIMAL|KEY_PAD_DIVIDE|KEY_PAD_ENTER|KEY_PAD_MINUS|KEY_PAD_MULTIPLY|KEY_PAD_PLUS|KEY_PAGEDOWN|KEY_PAGEUP|KEY_PERIOD|KEY_Q|KEY_R|KEY_RALT|KEY_RBRACKET|KEY_RCONTROL|KEY_RIGHT|KEY_RSHIFT|KEY_RWIN|KEY_S|KEY_SCROLLLOCK|KEY_SCROLLLOCKTOGGLE|KEY_SEMICOLON|KEY_SLASH|KEY_SPACE|KEY_T|KEY_TAB|KEY_U|KEY_UP|KEY_V|KEY_W|KEY_X|KEY_XBUTTON_A|KEY_XBUTTON_B|KEY_XBUTTON_BACK|KEY_XBUTTON_DOWN|KEY_XBUTTON_LEFT|KEY_XBUTTON_LEFT_SHOULDER|KEY_XBUTTON_LTRIGGER|KEY_XBUTTON_RIGHT|KEY_XBUTTON_RIGHT_SHOULDER|KEY_XBUTTON_RTRIGGER|KEY_XBUTTON_START|KEY_XBUTTON_STICK1|KEY_XBUTTON_STICK2|KEY_XBUTTON_UP|KEY_XBUTTON_X|KEY_XBUTTON_Y|KEY_XSTICK1_DOWN|KEY_XSTICK1_LEFT|KEY_XSTICK1_RIGHT|KEY_XSTICK1_UP|KEY_XSTICK2_DOWN|KEY_XSTICK2_LEFT|KEY_XSTICK2_RIGHT|KEY_XSTICK2_UP|KEY_Y|KEY_Z|LAST_SHARED_ACTIVITY|LAST_SHARED_COLLISION_GROUP|LAST_SHARED_SCHEDULE|LAST_VISIBLE_CONTENTS|LIGHT_STYLES_TABLENAME|MASK_ALL|MASK_BLOCKLOS|MASK_BLOCKLOS_AND_NPCS|MASK_CURRENT|MASK_DEADSOLID|MASK_NPCSOLID|MASK_NPCSOLID_BRUSHONLY|MASK_NPCWORLDSTATIC|MASK_OPAQUE|MASK_OPAQUE_AND_NPCS|MASK_PLAYERSOLID|MASK_PLAYERSOLID_BRUSHONLY|MASK_SHOT|MASK_SHOT_HULL|MASK_SHOT_PORTAL|MASK_SOLID|MASK_SOLID_BRUSHONLY|MASK_SPLITAREAPORTAL|MASK_VISIBLE|MASK_VISIBLE_AND_NPCS|MASK_WATER|MAT_ALIENFLESH|MAT_ANTLION|MAT_BLOODYFLESH|MAT_CLIP|MAT_COMPUTER|MAT_CONCRETE|MAT_DEFAULT|MAT_DIRT|MAT_EGGSHELL|MAT_FLESH|MAT_FOLIAGE|MAT_GLASS|MAT_GRASS|MAT_GRATE|MAT_METAL|MAT_PLASTIC|MAT_SAND|MAT_SLOSH|MAT_SNOW|MAT_TILE|MAT_VENT|MAT_WARPSHIELD|MAT_WOOD|MAX_CUSTOM_FILES|MAX_FILE_SIZE|MAX_FLOWS|MAX_FRAGMENT_SIZE|MAX_RATE|MAX_STREAMS|MAX_SUBCHANNELS|MIN_RATE|MOUSE_4|MOUSE_5|MOUSE_COUNT|MOUSE_FIRST|MOUSE_LAST|MOUSE_LEFT|MOUSE_MIDDLE|MOUSE_RIGHT|MOUSE_WHEEL_DOWN|MOUSE_WHEEL_UP|MOVECOLLIDE_COUNT|MOVECOLLIDE_DEFAULT|MOVECOLLIDE_FLY_BOUNCE|MOVECOLLIDE_FLY_CUSTOM|MOVECOLLIDE_FLY_SLIDE|MOVETYPE_CUSTOM|MOVETYPE_FLY|MOVETYPE_FLYGRAVITY|MOVETYPE_ISOMETRIC|MOVETYPE_LADDER|MOVETYPE_NOCLIP|MOVETYPE_NONE|MOVETYPE_OBSERVER|MOVETYPE_PUSH|MOVETYPE_STEP|MOVETYPE_VPHYSICS|MOVETYPE_WALK|MP_STATE_ENDED|MP_STATE_PAUSED|MP_STATE_PLAYING|MULTITOOL_ADD_LEFT|MULTITOOL_ADD_RIGHT|NAV_MESH_AVOID|NAV_MESH_CLIFF|NAV_MESH_CROUCH|NAV_MESH_DONT_HIDE|NAV_MESH_FUNC_COST|NAV_MESH_HAS_ELEVATOR|NAV_MESH_INVALID|NAV_MESH_JUMP|NAV_MESH_NAV_BLOCKER|NAV_MESH_NO_HOSTAGES|NAV_MESH_NO_JUMP|NAV_MESH_NO_MERGE|NAV_MESH_OBSTACLE_TOP|NAV_MESH_PRECISE|NAV_MESH_RUN|NAV_MESH_STAIRS|NAV_MESH_STAND|NAV_MESH_STOP|NAV_MESH_TRANSIENT|NAV_MESH_WALK|NET_MESSAGE_BITS|NODE_TYPE_AIR|NODE_TYPE_CLIMB|NODE_TYPE_GROUND|NODE_TYPE_WATER|NOTIFYSOUND_CONFIRM1|NOTIFYSOUND_CONFIRM2|NOTIFYSOUND_CONFIRM3|NOTIFYSOUND_CONFIRM4|NOTIFYSOUND_DRIP1|NOTIFYSOUND_DRIP2|NOTIFYSOUND_DRIP3|NOTIFYSOUND_DRIP4|NOTIFYSOUND_DRIP5|NOTIFYSOUND_ERROR1|NOTIFYSOUND_NONE|NOTIFY_CLEANUP|NOTIFY_ERROR|NOTIFY_GENERIC|NOTIFY_HINT|NOTIFY_UNDO|NPC_STATE_ALERT|NPC_STATE_COMBAT|NPC_STATE_DEAD|NPC_STATE_IDLE|NPC_STATE_INVALID|NPC_STATE_NONE|NPC_STATE_PLAYDEAD|NPC_STATE_PRONE|NPC_STATE_SCRIPT|NUM_AI_CLASSES|NUM_HULLS|NUM_MP_STATE|OBS_MODE_CHASE|OBS_MODE_DEATHCAM|OBS_MODE_FIXED|OBS_MODE_FREEZECAM|OBS_MODE_IN_EYE|OBS_MODE_NONE|OBS_MODE_ROAMING|ONOFF_USE|PATTACH_ABSORIGIN|PATTACH_ABSORIGIN_FOLLOW|PATTACH_CUSTOMORIGIN|PATTACH_POINT|PATTACH_POINT_FOLLOW|PATTACH_WORLDORIGIN|PLAYERANIMEVENT_ATTACK_GRENADE|PLAYERANIMEVENT_ATTACK_PRIMARY|PLAYERANIMEVENT_ATTACK_SECONDARY|PLAYERANIMEVENT_CANCEL|PLAYERANIMEVENT_CUSTOM|PLAYERANIMEVENT_CUSTOM_GESTURE|PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE|PLAYERANIMEVENT_CUSTOM_SEQUENCE|PLAYERANIMEVENT_DIE|PLAYERANIMEVENT_DOUBLEJUMP|PLAYERANIMEVENT_FLINCH_CHEST|PLAYERANIMEVENT_FLINCH_HEAD|PLAYERANIMEVENT_FLINCH_LEFTARM|PLAYERANIMEVENT_FLINCH_LEFTLEG|PLAYERANIMEVENT_FLINCH_RIGHTARM|PLAYERANIMEVENT_FLINCH_RIGHTLEG|PLAYERANIMEVENT_JUMP|PLAYERANIMEVENT_RELOAD|PLAYERANIMEVENT_RELOAD_END|PLAYERANIMEVENT_RELOAD_LOOP|PLAYERANIMEVENT_SNAP_YAW|PLAYERANIMEVENT_SPAWN|PLAYERANIMEVENT_SWIM|PLAYER_ATTACK1|PLAYER_DIE|PLAYER_IDLE|PLAYER_IN_VEHICLE|PLAYER_JUMP|PLAYER_LEAVE_AIMING|PLAYER_RELOAD|PLAYER_START_AIMING|PLAYER_SUPERJUMP|PLAYER_WALK|QUOTE|RADIX|RADIX_LEN|RENDERGROUP_BOTH|RENDERGROUP_OPAQUE|RENDERGROUP_OPAQUE_BRUSH|RENDERGROUP_OPAQUE_HUGE|RENDERGROUP_OTHER|RENDERGROUP_STATIC|RENDERGROUP_STATIC_HUGE|RENDERGROUP_TRANSLUCENT|RENDERGROUP_VIEWMODEL|RENDERGROUP_VIEWMODEL_TRANSLUCENT|RENDERMODE_ENVIROMENTAL|RENDERMODE_GLOW|RENDERMODE_NONE|RENDERMODE_NORMAL|RENDERMODE_TRANSADD|RENDERMODE_TRANSADDFRAMEBLEND|RENDERMODE_TRANSALPHA|RENDERMODE_TRANSALPHADD|RENDERMODE_TRANSCOLOR|RENDERMODE_TRANSTEXTURE|RENDERMODE_WORLDGLOW|RES_FATALIFMISSING|RES_PRELOAD|SCHED_AISCRIPT|SCHED_ALERT_FACE|SCHED_ALERT_FACE_BESTSOUND|SCHED_ALERT_REACT_TO_COMBAT_SOUND|SCHED_ALERT_SCAN|SCHED_ALERT_STAND|SCHED_ALERT_WALK|SCHED_AMBUSH|SCHED_ARM_WEAPON|SCHED_BACK_AWAY_FROM_ENEMY|SCHED_BACK_AWAY_FROM_SAVE_POSITION|SCHED_BIG_FLINCH|SCHED_CHASE_ENEMY|SCHED_CHASE_ENEMY_FAILED|SCHED_COMBAT_FACE|SCHED_COMBAT_PATROL|SCHED_COMBAT_STAND|SCHED_COMBAT_SWEEP|SCHED_COMBAT_WALK|SCHED_COWER|SCHED_DIE|SCHED_DIE_RAGDOLL|SCHED_DISARM_WEAPON|SCHED_DROPSHIP_DUSTOFF|SCHED_DUCK_DODGE|SCHED_ESTABLISH_LINE_OF_FIRE|SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK|SCHED_FAIL|SCHED_FAIL_ESTABLISH_LINE_OF_FIRE|SCHED_FAIL_NOSTOP|SCHED_FAIL_TAKE_COVER|SCHED_FALL_TO_GROUND|SCHED_FEAR_FACE|SCHED_FLEE_FROM_BEST_SOUND|SCHED_FLINCH_PHYSICS|SCHED_FORCED_GO|SCHED_FORCED_GO_RUN|SCHED_GET_HEALTHKIT|SCHED_HIDE_AND_RELOAD|SCHED_IDLE_STAND|SCHED_IDLE_WALK|SCHED_IDLE_WANDER|SCHED_INTERACTION_MOVE_TO_PARTNER|SCHED_INTERACTION_WAIT_FOR_PARTNER|SCHED_INVESTIGATE_SOUND|SCHED_MELEE_ATTACK1|SCHED_MELEE_ATTACK2|SCHED_MOVE_AWAY|SCHED_MOVE_AWAY_END|SCHED_MOVE_AWAY_FAIL|SCHED_MOVE_AWAY_FROM_ENEMY|SCHED_MOVE_TO_WEAPON_RANGE|SCHED_NEW_WEAPON|SCHED_NEW_WEAPON_CHEAT|SCHED_NONE|SCHED_NPC_FREEZE|SCHED_PATROL_RUN|SCHED_PATROL_WALK|SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE|SCHED_RANGE_ATTACK1|SCHED_RANGE_ATTACK2|SCHED_RELOAD|SCHED_RUN_FROM_ENEMY|SCHED_RUN_FROM_ENEMY_FALLBACK|SCHED_RUN_FROM_ENEMY_MOB|SCHED_RUN_RANDOM|SCHED_SCENE_GENERIC|SCHED_SCRIPTED_CUSTOM_MOVE|SCHED_SCRIPTED_FACE|SCHED_SCRIPTED_RUN|SCHED_SCRIPTED_WAIT|SCHED_SCRIPTED_WALK|SCHED_SHOOT_ENEMY_COVER|SCHED_SLEEP|SCHED_SMALL_FLINCH|SCHED_SPECIAL_ATTACK1|SCHED_SPECIAL_ATTACK2|SCHED_STANDOFF|SCHED_SWITCH_TO_PENDING_WEAPON|SCHED_TAKE_COVER_FROM_BEST_SOUND|SCHED_TAKE_COVER_FROM_ENEMY|SCHED_TAKE_COVER_FROM_ORIGIN|SCHED_TARGET_CHASE|SCHED_TARGET_FACE|SCHED_VICTORY_DANCE|SCHED_WAIT_FOR_SCRIPT|SCHED_WAIT_FOR_SPEAK_FINISH|SCHED_WAKE_ANGRY|SERVERID|SERVER_STARTUP_DATA_TABLENAME|SF_CITIZEN_AMMORESUPPLIER|SF_CITIZEN_FOLLOW|SF_CITIZEN_IGNORE_SEMAPHORE|SF_CITIZEN_MEDIC|SF_CITIZEN_NOT_COMMANDABLE|SF_CITIZEN_RANDOM_HEAD|SF_CITIZEN_RANDOM_HEAD_FEMALE|SF_CITIZEN_RANDOM_HEAD_MALE|SF_CITIZEN_USE_RENDER_BOUNDS|SF_FLOOR_TURRET_CITIZEN|SF_NPC_ALTCOLLISION|SF_NPC_ALWAYSTHINK|SF_NPC_DROP_HEALTHKIT|SF_NPC_FADE_CORPSE|SF_NPC_FALL_TO_GROUND|SF_NPC_GAG|SF_NPC_LONG_RANGE|SF_NPC_NO_PLAYER_PUSHAWAY|SF_NPC_NO_WEAPON_DROP|SF_NPC_START_EFFICIENT|SF_NPC_TEMPLATE|SF_NPC_WAIT_FOR_SCRIPT|SF_NPC_WAIT_TILL_SEEN|SF_PHYSBOX_MOTIONDISABLED|SF_PHYSBOX_NEVER_PICK_UP|SF_PHYSPROP_MOTIONDISABLED|SF_PHYSPROP_PREVENT_PICKUP|SF_ROLLERMINE_FRIENDLY|SIGNONSTATE_CHALLENGE|SIGNONSTATE_CHANGELEVEL|SIGNONSTATE_CONNECTED|SIGNONSTATE_FULL|SIGNONSTATE_NEW|SIGNONSTATE_NONE|SIGNONSTATE_PRESPAWN|SIGNONSTATE_SPAWN|SIMPLE_USE|SIM_GLOBAL_ACCELERATION|SIM_GLOBAL_FORCE|SIM_LOCAL_ACCELERATION|SIM_LOCAL_FORCE|SIM_NOTHING|SINGLE_QUOTE|SND_CHANGE_PITCH|SND_CHANGE_VOL|SND_DELAY|SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL|SND_IGNORE_NAME|SND_IGNORE_PHONEMES|SND_NOFLAGS|SND_SHOULDPAUSE|SND_SPAWNING|SND_STOP|SND_STOP_LOOPING|SOLID_BBOX|SOLID_BSP|SOLID_CUSTOM|SOLID_NONE|SOLID_OBB|SOLID_OBB_YAW|SOLID_VPHYSICS|STEPSOUNDTIME_NORMAL|STEPSOUNDTIME_ON_LADDER|STEPSOUNDTIME_WATER_FOOT|STEPSOUNDTIME_WATER_KNEE|SURF_BUMPLIGHT|SURF_HINT|SURF_HITBOX|SURF_LIGHT|SURF_NOCHOP|SURF_NODECALS|SURF_NODRAW|SURF_NOLIGHT|SURF_NOPORTAL|SURF_NOSHADOWS|SURF_SKIP|SURF_SKY|SURF_TRANS|SURF_TRIGGER|SURF_WARP|SVC_LASTMSG|TASK_ADD_GESTURE|TASK_ADD_GESTURE_WAIT|TASK_ADD_HEALTH|TASK_ANNOUNCE_ATTACK|TASK_BIG_FLINCH|TASK_CLEAR_COMMAND_GOAL|TASK_CLEAR_FAIL_SCHEDULE|TASK_CLEAR_HINTNODE|TASK_CLEAR_LASTPOSITION|TASK_CLEAR_MOVE_WAIT|TASK_CREATE_PENDING_WEAPON|TASK_DEBUG_BREAK|TASK_DEFER_DODGE|TASK_DIE|TASK_ENABLE_SCRIPT|TASK_FACE_AWAY_FROM_SAVEPOSITION|TASK_FACE_ENEMY|TASK_FACE_HINTNODE|TASK_FACE_IDEAL|TASK_FACE_LASTPOSITION|TASK_FACE_PATH|TASK_FACE_PLAYER|TASK_FACE_REASONABLE|TASK_FACE_SAVEPOSITION|TASK_FACE_SCRIPT|TASK_FACE_TARGET|TASK_FALL_TO_GROUND|TASK_FIND_BACKAWAY_FROM_SAVEPOSITION|TASK_FIND_COVER_FROM_BEST_SOUND|TASK_FIND_COVER_FROM_ENEMY|TASK_FIND_COVER_FROM_ORIGIN|TASK_FIND_FAR_NODE_COVER_FROM_ENEMY|TASK_FIND_HINTNODE|TASK_FIND_LATERAL_COVER_FROM_ENEMY|TASK_FIND_LOCK_HINTNODE|TASK_FIND_NEAR_NODE_COVER_FROM_ENEMY|TASK_FIND_NODE_COVER_FROM_ENEMY|TASK_FORGET|TASK_FREEZE|TASK_GATHER_CONDITIONS|TASK_GET_CHASE_PATH_TO_ENEMY|TASK_GET_FLANK_ARC_PATH_TO_ENEMY_LOS|TASK_GET_FLANK_RADIUS_PATH_TO_ENEMY_LOS|TASK_GET_PATH_AWAY_FROM_BEST_SOUND|TASK_GET_PATH_TO_BESTSCENT|TASK_GET_PATH_TO_BESTSOUND|TASK_GET_PATH_TO_COMMAND_GOAL|TASK_GET_PATH_TO_ENEMY|TASK_GET_PATH_TO_ENEMY_CORPSE|TASK_GET_PATH_TO_ENEMY_LKP|TASK_GET_PATH_TO_ENEMY_LKP_LOS|TASK_GET_PATH_TO_ENEMY_LOS|TASK_GET_PATH_TO_GOAL|TASK_GET_PATH_TO_HINTNODE|TASK_GET_PATH_TO_INTERACTION_PARTNER|TASK_GET_PATH_TO_LASTPOSITION|TASK_GET_PATH_TO_PLAYER|TASK_GET_PATH_TO_RANDOM_NODE|TASK_GET_PATH_TO_RANGE_ENEMY_LKP_LOS|TASK_GET_PATH_TO_SAVEPOSITION|TASK_GET_PATH_TO_SAVEPOSITION_LOS|TASK_GET_PATH_TO_TARGET|TASK_GET_PATH_TO_TARGET_WEAPON|TASK_IGNORE_OLD_ENEMIES|TASK_ITEM_PICKUP|TASK_ITEM_RUN_PATH|TASK_LOCK_HINTNODE|TASK_MARK_COMMAND_GOAL_POS|TASK_MELEE_ATTACK1|TASK_MELEE_ATTACK2|TASK_MOVE_AWAY_PATH|TASK_MOVE_TO_GOAL_RANGE|TASK_MOVE_TO_TARGET_RANGE|TASK_PLANT_ON_SCRIPT|TASK_PLAY_HINT_ACTIVITY|TASK_PLAY_PRIVATE_SEQUENCE|TASK_PLAY_PRIVATE_SEQUENCE_FACE_ENEMY|TASK_PLAY_SCENE|TASK_PLAY_SCRIPT|TASK_PLAY_SCRIPT_POST_IDLE|TASK_PLAY_SEQUENCE|TASK_PLAY_SEQUENCE_FACE_ENEMY|TASK_PLAY_SEQUENCE_FACE_TARGET|TASK_PRE_SCRIPT|TASK_PUSH_SCRIPT_ARRIVAL_ACTIVITY|TASK_RANDOMIZE_FRAMERATE|TASK_RANGE_ATTACK1|TASK_RANGE_ATTACK2|TASK_REACT_TO_COMBAT_SOUND|TASK_RELOAD|TASK_REMEMBER|TASK_RESET_ACTIVITY|TASK_RUN_PATH|TASK_RUN_PATH_FLEE|TASK_RUN_PATH_FOR_UNITS|TASK_RUN_PATH_TIMED|TASK_RUN_PATH_WITHIN_DIST|TASK_SCRIPT_CUSTOM_MOVE_TO_TARGET|TASK_SCRIPT_RUN_TO_TARGET|TASK_SCRIPT_WALK_TO_TARGET|TASK_SET_ACTIVITY|TASK_SET_FAIL_SCHEDULE|TASK_SET_GOAL|TASK_SET_IDEAL_YAW_TO_CURRENT|TASK_SET_ROUTE_SEARCH_TIME|TASK_SET_SCHEDULE|TASK_SET_TOLERANCE_DISTANCE|TASK_SMALL_FLINCH|TASK_SOUND_ANGRY|TASK_SOUND_DEATH|TASK_SOUND_DIE|TASK_SOUND_IDLE|TASK_SOUND_PAIN|TASK_SOUND_WAKE|TASK_SPEAK_SENTENCE|TASK_SPECIAL_ATTACK1|TASK_SPECIAL_ATTACK2|TASK_STOP_MOVING|TASK_STORE_BESTSOUND_IN_SAVEPOSITION|TASK_STORE_BESTSOUND_REACTORIGIN_IN_SAVEPOSITION|TASK_STORE_ENEMY_POSITION_IN_SAVEPOSITION|TASK_STORE_LASTPOSITION|TASK_STORE_POSITION_IN_SAVEPOSITION|TASK_STRAFE_PATH|TASK_SUGGEST_STATE|TASK_TARGET_PLAYER|TASK_TURN_LEFT|TASK_TURN_RIGHT|TASK_USE_SMALL_HULL|TASK_WAIT|TASK_WAIT_FACE_ENEMY|TASK_WAIT_FACE_ENEMY_RANDOM|TASK_WAIT_FOR_MOVEMENT|TASK_WAIT_FOR_MOVEMENT_STEP|TASK_WAIT_FOR_SCRIPT|TASK_WAIT_FOR_SPEAK_FINISH|TASK_WAIT_INDEFINITE|TASK_WAIT_PVS|TASK_WAIT_RANDOM|TASK_WAIT_UNTIL_NO_DANGER_SOUND|TASK_WALK_PATH|TASK_WALK_PATH_FOR_UNITS|TASK_WALK_PATH_TIMED|TASK_WALK_PATH_WITHIN_DIST|TASK_WANDER|TASK_WEAPON_CREATE|TASK_WEAPON_FIND|TASK_WEAPON_PICKUP|TASK_WEAPON_RUN_PATH|TEAM_CONNECTING|TEAM_SPECTATOR|TEAM_UNASSIGNED|TEXT_ALIGN_BOTTOM|TEXT_ALIGN_CENTER|TEXT_ALIGN_LEFT|TEXT_ALIGN_RIGHT|TEXT_ALIGN_TOP|TRACER_BEAM|TRACER_LINE|TRACER_LINE_AND_WHIZ|TRACER_NONE|TRACER_RAIL|TRANSFER_ID|TRANSMIT_ALWAYS|TRANSMIT_LOCATION|TRANSMIT_NEVER|TRANSMIT_PVS|TYPE_ANGLE|TYPE_BOOL|TYPE_COLOR|TYPE_CONVAR|TYPE_COUNT|TYPE_DAMAGEINFO|TYPE_DLIGHT|TYPE_EFFECTDATA|TYPE_ENTITY|TYPE_FILE|TYPE_FUNCTION|TYPE_IMESH|TYPE_INVALID|TYPE_LIGHTUSERDATA|TYPE_LOCOMOTION|TYPE_MATERIAL|TYPE_MATRIX|TYPE_MOVEDATA|TYPE_NAVAREA|TYPE_NAVLADDER|TYPE_NIL|TYPE_NUMBER|TYPE_PANEL|TYPE_PARTICLE|TYPE_PARTICLEEMITTER|TYPE_PATH|TYPE_PHYSOBJ|TYPE_PIXELVISHANDLE|TYPE_RECIPIENTFILTER|TYPE_RESTORE|TYPE_SAVE|TYPE_SCRIPTEDVEHICLE|TYPE_SOUND|TYPE_SOUNDHANDLE|TYPE_STRING|TYPE_TABLE|TYPE_TEXTURE|TYPE_THREAD|TYPE_USERCMD|TYPE_USERMSG|TYPE_VECTOR|TYPE_VIDEO|USER_INFO_TABLENAME|USE_OFF|USE_ON|USE_SET|USE_TOGGLE|VERSION|VERSIONSTR|WEAPON_PROFICIENCY_AVERAGE|WEAPON_PROFICIENCY_GOOD|WEAPON_PROFICIENCY_PERFECT|WEAPON_PROFICIENCY_POOR|WEAPON_PROFICIENCY_VERY_GOOD|_VERSION").split("|");
    
    
        if("editor_ac" in window) {
            for (var name in window.editor_ac) { if (window.editor_ac.hasOwnProperty(name)) {
                var source = window.editor_ac[name];
                var target = this[name];
                if ("DEBUG" in window && DEBUG===true) {
                    console.log("Appending clientside highlight rules "+name);
                }
                if (target) {
                    var targetLength = target.length;
                    var sourceLength = source.length;
                    var can = false;
                    for (var i = 0; i < sourceLength; i++) {
                        can = true;
                        var kw = source[i];
                        
                        for (var j = 0; j < targetLength; j++) {
                            var existing = target[j];
                            if (existing==kw) {
                                can =false;
                                break;
                            }
                        }
                        
                        if (can) {
                            target.push(kw);
                        }
                        
                    }
                    
                
                } else {
                    console.log("cant concat "+k);
                }
            }}
            
        } else {
            console.log("glua: Could not load clientside highlights!");
        }
        var temp = {};
        this.$objfuncs.forEach(function(e) { 
            var splitted = e.split(':');
            temp[splitted[1]]=true;
        });
        for (var k in temp) { if (temp.hasOwnProperty(k)) {
            this.$objfuncs.push(":"+k);
        }}
        
        var keywords = (
            "break|do|else|elseif|end|for|function|if|in|local|repeat|"+
             "return|then|until|while|or|and|not|continue|goto"
        );
    
        var builtinConstants = ("true|false|nil|_G|_VERSION|VERSION|SERVER|CLIENT");
    
        var functions = (
            "__add|__sub|__mod|__unm|__concat|__lt|__index|__call|__gc|__metatable|"+
             "__mul|__div|__pow|__len|__eq|__le|__newindex|__tostring|__mode|__tonumber" + 
        
             '|' + this.$nonmodulefuncs.join('|')  +
             '|' + this.$modulefuncs	.join('|') +
             '|' + this.$objfuncs		.join('|') +
             '|' + this.$enums			.join('|') +
             '|' + this.$hooks			.join('|') +
             '|' + this.$globals		.join('|')
        
        );
    
        var stdLibaries = ("string|package|os|io|math|debug|table|coroutine");
    
    
        var keywordMapper = this.createKeywordMapper({
            "keyword": keywords,
            "support.function": functions,
            "constant.library": stdLibaries,
            "constant.language": builtinConstants,
            "variable.language": "self"
        }, "identifier");
    
        var decimalInteger = "(?:(?:[1-9]\\d*)|(?:0))";
        var hexInteger = "(?:0[xX][\\dA-Fa-f]+)";
        var integer = "(?:" + decimalInteger + "|" + hexInteger + ")";
    
        var fraction = "(?:\\.\\d+)";
        var intPart = "(?:\\d+)";
        var pointFloat = "(?:(?:" + intPart + "?" + fraction + ")|(?:" + intPart + "\\.))";
        var floatNumber = "(?:" + pointFloat + ")";
    
        this.$rules = {
            "start" : [
            {
                token : "comment", // multi line comment
                regex : "\\/\\*",
                next : "comment"
            },
            {
                token : "comment",
                regex : "//",
                next : "singleLineComment"
            },
            
            {
                stateName: "bracketedComment",
                onMatch : function(value, currentState, stack){
                    stack.unshift(this.next, value.length - 2, currentState);
                    return "comment";
                },
                regex : /\-\-\[=*\[/,
                next  : [
                    {
                        onMatch : function(value, currentState, stack) {
                            if (value.length == stack[1]) {
                                stack.shift();
                                stack.shift();
                                this.next = stack.shift();
                            } else {
                                this.next = "";
                            }
                            return "comment";
                        },
                        regex : /\]=*\]/,
                        next  : "start"
                    }, {
                        defaultToken : "comment"
                    }
                ]
            },
    
            {
                token : "comment",
                regex : "\\-\\-.*$"
            },
            {
                stateName: "bracketedString",
                onMatch : function(value, currentState, stack){
                    stack.unshift(this.next, value.length, currentState);
                    return "comment";
                },
                regex : /\[=*\[/,
                next  : [
                    {
                        onMatch : function(value, currentState, stack) {
                            if (value.length == stack[1]) {
                                stack.shift();
                                stack.shift();
                                this.next = stack.shift();
                            } else {
                                this.next = "";
                            }
                            return "comment";
                        },
                        
                        regex : /\]=*\]/,
                        next  : "start"
                    }, {
                        defaultToken : "comment"
                    }
                ]
            },
            {
                token : "string",           // " string
                regex : '"(?:[^\\\\]|\\\\.)*?"'
            }, {
                token : "string",           // ' string
                regex : "'(?:[^\\\\]|\\\\.)*?'"
            }, {
                token : "constant.numeric", // float
                regex : floatNumber
            }, {
                token : "constant.numeric", // integer
                regex : integer + "\\b"
            }, {
                token : keywordMapper,
                regex : "[a-zA-Z_$\\:\\.][\\.a-zA-Z0-9_$]*\\b"
            }, {
                token : "keyword.operator",
                regex : "\\+|\\-|\\*|\\/|%|\\#|\\^|~|!=|!|\\|\\||&&|<|>|<=|=>|==|~=|=|\\:|\\.\\.\\.|\\.\\."
            }, {
                token : "paren.lparen",
                regex : "[\\[\\(\\{]"
            }, {
                token : "paren.rparen",
                regex : "[\\]\\)\\}]"
            }, {
                token : "text",
                regex : "\\s+|\\w+"
            } ],
                    
            "singleLineComment" : [
                {
                    token : "comment",
                    regex : /\\$/,
                    next : "singleLineComment"
                }, {
                    token : "comment",
                    regex : /$/,
                    next : "start"
                }, {
                    defaultToken: "comment"
                }
            ],
            "comment" : [
                {
                    token : "comment", // closing comment
                    regex : ".*?\\*\\/",
                    next : "start"
                }, {
                    token : "comment", // comment spanning whole line
                    regex : ".+"
                }
            ]
            
        };
        
        this.normalizeRules();
    };
    
    oop.inherits(GLuaHighlightRules, TextHighlightRules);
    
    exports.GLuaHighlightRules = GLuaHighlightRules;
    });
    
    define("ace/mode/folding/lua",["require","exports","module","ace/lib/oop","ace/mode/folding/fold_mode","ace/range","ace/token_iterator"], function(require, exports, module) {
    "use strict";
    
    var oop = require("../../lib/oop");
    var BaseFoldMode = require("./fold_mode").FoldMode;
    var Range = require("../../range").Range;
    var TokenIterator = require("../../token_iterator").TokenIterator;
    
    
    var FoldMode = exports.FoldMode = function() {};
    
    oop.inherits(FoldMode, BaseFoldMode);
    
    (function() {
    
        this.foldingStartMarker = /\b(function|then|do|repeat)\b|{\s*$|(\[=*\[)/;
        this.foldingStopMarker = /\bend\b|^\s*}|\]=*\]/;
    
        this.getFoldWidget = function(session, foldStyle, row) {
            var line = session.getLine(row);
            var isStart = this.foldingStartMarker.test(line);
            var isEnd = this.foldingStopMarker.test(line);
    
            if (isStart && !isEnd) {
                var match = line.match(this.foldingStartMarker);
                if (match[1] == "then" && /\belseif\b/.test(line))
                    return;
                if (match[1]) {
                    if (session.getTokenAt(row, match.index + 1).type === "keyword")
                        return "start";
                } else if (match[2]) {
                    var type = session.bgTokenizer.getState(row) || "";
                    if (type[0] == "bracketedComment" || type[0] == "bracketedString")
                        return "start";
                } else {
                    return "start";
                }
            }
            if (foldStyle != "markbeginend" || !isEnd || isStart && isEnd)
                return "";
    
            var match = line.match(this.foldingStopMarker);
            if (match[0] === "end") {
                if (session.getTokenAt(row, match.index + 1).type === "keyword")
                    return "end";
            } else if (match[0][0] === "]") {
                var type = session.bgTokenizer.getState(row - 1) || "";
                if (type[0] == "bracketedComment" || type[0] == "bracketedString")
                    return "end";
            } else
                return "end";
        };
    
        this.getFoldWidgetRange = function(session, foldStyle, row) {
            var line = session.doc.getLine(row);
            var match = this.foldingStartMarker.exec(line);
            if (match) {
                if (match[1])
                    return this.luaBlock(session, row, match.index + 1);
    
                if (match[2])
                    return session.getCommentFoldRange(row, match.index + 1);
    
                return this.openingBracketBlock(session, "{", row, match.index);
            }
    
            var match = this.foldingStopMarker.exec(line);
            if (match) {
                if (match[0] === "end") {
                    if (session.getTokenAt(row, match.index + 1).type === "keyword")
                        return this.luaBlock(session, row, match.index + 1);
                }
    
                if (match[0][0] === "]")
                    return session.getCommentFoldRange(row, match.index + 1);
    
                return this.closingBracketBlock(session, "}", row, match.index + match[0].length);
            }
        };
    
        this.luaBlock = function(session, row, column) {
            var stream = new TokenIterator(session, row, column);
            var indentKeywords = {
                "function": 1,
                "do": 1,
                "then": 1,
                "elseif": -1,
                "end": -1,
                "repeat": 1,
                "until": -1
            };
    
            var token = stream.getCurrentToken();
            if (!token || token.type != "keyword")
                return;
    
            var val = token.value;
            var stack = [val];
            var dir = indentKeywords[val];
    
            if (!dir)
                return;
    
            var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;
            var startRow = row;
    
            stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;
            while(token = stream.step()) {
                if (token.type !== "keyword")
                    continue;
                var level = dir * indentKeywords[token.value];
    
                if (level > 0) {
                    stack.unshift(token.value);
                } else if (level <= 0) {
                    stack.shift();
                    if (!stack.length && token.value != "elseif")
                        break;
                    if (level === 0)
                        stack.unshift(token.value);
                }
            }
    
            var row = stream.getCurrentTokenRow();
            if (dir === -1)
                return new Range(row, session.getLine(row).length, startRow, startColumn);
            else
                return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());
        };
    
    }).call(FoldMode.prototype);
    
    });
    
    define("ace/mode/glua",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/glua_highlight_rules","ace/mode/folding/lua","ace/range","ace/worker/worker_client"], function(require, exports, module) {
    "use strict";
    
    var oop = require("../lib/oop");
    var TextMode = require("./text").Mode;
    var GLuaHighlightRules = require("./glua_highlight_rules").GLuaHighlightRules;
    var GLuaFoldMode = require("./folding/lua").FoldMode;
    var Range = require("../range").Range;
    var WorkerClient = require("../worker/worker_client").WorkerClient;
    var Mode = function() {
        this.HighlightRules = GLuaHighlightRules;
        this.foldingRules = new GLuaFoldMode();
    }; 
    oop.inherits(Mode, TextMode);
    
    var ID_REGEX = /[:\.a-zA-Z_0-9]/;
    var ID_REGEX2 = /:[:\.a-zA-Z_0-9]/;
    
    
    
    (function() {
       
        this.lineCommentStart = "--";
        this.blockComment = {start: "--[[", end: "]]"};
        
        var indentKeywords = {
            "function": 1,
            "then": 1,
            "do": 1,
            "else": 1,
            "elseif": 1,
            "repeat": 1,
            "end": -1,
            "until": -1
        };
        var outdentKeywords = [
            "else",
            "elseif",
            "end",
            "until"
        ];
    
        function getNetIndentLevel(tokens) {
            var level = 0;
            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];
                if (token.type == "keyword") {
                    if (token.value in indentKeywords) {
                        level += indentKeywords[token.value];
                    }
                } else if (token.type == "paren.lparen") {
                    level ++;
                } else if (token.type == "paren.rparen") {
                    level --;
                }
            }
            if (level < 0) {
                return -1;
            } else if (level > 0) {
                return 1;
            } else {
                return 0;
            }
        }
    
        this.getNextLineIndent = function(state, line, tab) {
            var indent = this.$getIndent(line);
            var level = 0;
    
            var tokenizedLine = this.getTokenizer().getLineTokens(line, state);
            var tokens = tokenizedLine.tokens;
    
            if (state == "start") {
                level = getNetIndentLevel(tokens);
            }
            if (level > 0) {
                return indent + tab;
            } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {
                if (!this.checkOutdent(state, line, "\n")) {
                    return indent.substr(0, indent.length - tab.length);
                }
            }
            return indent;
        };
    
        this.checkOutdent = function(state, line, input) {
            if (input != "\n" && input != "\r" && input != "\r\n")
                return false;
    
            if (line.match(/^\s*[\)\}\]]$/))
                return true;
    
 ]==]